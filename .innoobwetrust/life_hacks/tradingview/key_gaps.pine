// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ©  InNoobWeTrust

//@version=6

// @description TODO: add library description here
indicator("[innoobwetrust][indi] key gaps", overlay = true)
import TradingView/ta/9
import forbidden_gun/commonlib/4
import forbidden_gun/plot_lib/3


//===============================================================================
// Types
//===============================================================================

type KeyGap
	plot_lib.TfBarZone zone
	float spread
	float relative_spread

//===============================================================================
// Input
//===============================================================================
key_gap_enable = input.bool(true, 'Enable')
key_gap_atr_len = input.int(34, 'base ATR length')
key_gap_threshold = input.float(2.618, 'ATR mult')
key_gap_cap = input.float(4.236, 'ATR upper cap')
key_gap_body_percent = input.float(0.618, 'Min body percent', minval=0, maxval=1)
key_gap_buffer = input.int(128, 'Buffer', minval = 0)
key_gap_plot_last = input.int(3, 'Plot last (0 to disable)', minval = 0)
key_gap_gradient_inline = 'Key gap gradient'
key_gap_gradient_low = input.color(color.new(color.aqua, 88), key_gap_gradient_inline, inline = key_gap_gradient_inline)
key_gap_gradient_high = input.color(color.new(color.teal, 85), '', inline = key_gap_gradient_inline)
key_gap_inverse_gradient = input.bool(true, "Inverse gradient based on candle color")
key_gap_heatmap_grp = '▶️ Gap heatmap'
key_gap_heatmap_span = input.float(2.618, 'Heatmap span (multiply with ATR, 0 to disable)', minval=0, group = key_gap_heatmap_grp)
key_gap_heatmap_offset = input.int(4, 'Heatmap offset', group = key_gap_heatmap_grp)
key_gap_heatmap_width = input.int(4, 'Heatmap width', group = key_gap_heatmap_grp)

//===============================================================================
// Global vars
//===============================================================================

var array<KeyGap> key_gaps = array.new<KeyGap>(key_gap_buffer, na)
var array<plot_lib.TfBarZonePlot> key_gaps_plt = array.new<plot_lib.TfBarZonePlot>(key_gap_plot_last, na)
var array<box> key_level_boxes = array.new<box>()

//===============================================================================
// Calculation
//===============================================================================

key_gap_atr = ta.atr(key_gap_atr_len)
key_gap_candle_spread = high - low
key_gap_candle_spread_mult = key_gap_candle_spread / key_gap_atr[1]
candle_is_key = key_gap_candle_spread_mult >= key_gap_threshold and math.abs(commonlib.bar_body_percent()) >= key_gap_body_percent

if candle_is_key and key_gap_buffer > 0
	// Remove old gaps
	key_gaps.shift()

	tf_secs = timeframe.in_seconds()
	bar = plot_lib.TfBar.new(open, high, low, close, time, time_close)
	bar_zone = plot_lib.TfBarZone.new(tf_secs, bar)
	key_gaps.push(KeyGap.new(bar_zone, key_gap_candle_spread, key_gap_candle_spread_mult))

key_levels = array.new<float>()
for gap in key_gaps
	if not na(gap)
		key_levels.push(gap.zone.bar.l)
		key_levels.push(gap.zone.bar.h)
key_levels.sort(order.ascending)

//===============================================================================
// Plot
//===============================================================================

if barstate.islast 
	if key_gap_enable and key_gap_plot_last > 0
		// Remove and clear old plots
		while key_gaps_plt.size() > 0
			oldest_zone_plt = key_gaps_plt.shift()
			if not na(oldest_zone_plt)
				plot_lib.clear_tf_zone(oldest_zone_plt)

		for idx = key_gaps.size() - key_gap_plot_last to key_gaps.size() - 1
			gap = key_gaps.get(idx)
			// Skip empty slots in Buffer
			if na(gap)
				continue

			clr = color.from_gradient(gap.relative_spread, key_gap_threshold, key_gap_cap, key_gap_gradient_low, key_gap_gradient_high)
			if key_gap_inverse_gradient and gap.zone.bar.c < gap.zone.bar.o
				// Invert the color
				clr := color.rgb(255 - color.r(clr), 255 - color.g(clr), 255 - color.b(clr), color.t(clr))
			plt = plot_lib.plot_tf_zone(gap.zone, clr)
			key_gaps_plt.push(plt)

	if key_gap_heatmap_span > 0
		for b in key_level_boxes
			b.delete()
		key_level_boxes.clear()

		delta = key_gap_heatmap_span * key_gap_atr
		min_price = close - delta
		max_price = close + delta

		for gap in key_gaps
			if na(gap) or gap.zone.bar.h <= min_price or max_price <= gap.zone.bar.l
				continue

			clr = color.from_gradient(gap.relative_spread, key_gap_threshold, key_gap_cap, key_gap_gradient_low, key_gap_gradient_high)
			if key_gap_inverse_gradient and gap.zone.bar.c < gap.zone.bar.o
				// Invert the color
				clr := color.rgb(255 - color.r(clr), 255 - color.g(clr), 255 - color.b(clr), color.t(clr))
			b = box.new(left = bar_index + key_gap_heatmap_offset,
						 top = gap.zone.bar.h,
						 right = bar_index + key_gap_heatmap_offset + key_gap_heatmap_width,
						 bottom = gap.zone.bar.l,
						 border_color = color(na),
						 border_width = 2,
						 border_style = line.style_solid,
						 xloc = xloc.bar_index,
						 bgcolor = clr,
						 force_overlay = true)
			key_level_boxes.push(b)