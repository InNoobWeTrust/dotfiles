// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ©  InNoobWeTrust

//@version=6

// @description Quadruple BB, mixing fast/slow and double mult. Can hide individual combinations via settings
indicator("[innoobwetrust][indi] BB Remix", overlay = true)
import TradingView/ta/10
import forbidden_gun/commonlib/4
import forbidden_gun/plot_lib/1

//===============================================================================
// Inputs
//===============================================================================
bb_src = input.source(close,'Source')
bb_len_grp = '► Lengths (0 to disable)'
bbf_len = input.int(16,'Fast',group = bb_len_grp)
bbs_len = input.int(42,'Slow',group = bb_len_grp)
bb_mult_grp = '► Mult (0 to disable)'
bb_mult_primary = input.float(2,'Inner', group = bb_mult_grp)
bb_mult_secondary = input.float(3,'Outer', group = bb_mult_grp)
bb_color_grp = '► BB cloud gradient colors (opacity 0% to hide clouds)'
bb_inner_color = input.color(color.new(#d79921,88),'Inner', group = bb_color_grp)
bb_outer_color = input.color(color.new(#4e4542,90),'Outer', group = bb_color_grp)
bb_mid_transp = input.int(80,'BB mid transparency (100 to hide lines)',minval=0,maxval=100)
bb_border_transp = input.int(88,'BB border (upper/lower) transparency (100 to hide lines)',minval=0,maxval=100)
bb_cloud_trend_colors_grp = '► BB cloud trend colors (up/down)'
bb_cloud_trend_up = input.color(color.new(#4d9c6d, 70),'Up',group = bb_cloud_trend_colors_grp)
bb_cloud_trend_dwn = input.color(color.new(#da0d0d, 70),'Down',group = bb_cloud_trend_colors_grp)

//===============================================================================
// Calculations
//===============================================================================

[bbf_m,bbf_u,bbf_l] = ta.bb(bb_src,math.max(1, bbf_len),math.max(1,bb_mult_primary))
[bbf_m2,bbf_u2,bbf_l2] = ta.bb(bb_src,math.max(1, bbf_len),math.max(1,bb_mult_secondary))

[bbs_m,bbs_u,bbs_l] = ta.bb(bb_src,math.max(1, bbs_len),math.max(1,bb_mult_primary))
[bbs_m2,bbs_u2,bbs_l2] = ta.bb(bb_src,math.max(1, bbs_len),math.max(1,bb_mult_secondary))

// BB base colors
bb_inner_mid_color = color.new(bb_inner_color,bb_mid_transp)
bb_outer_mid_color = color.new(bb_outer_color,bb_mid_transp)
bb_inner_border_color = color.new(bb_inner_color,bb_border_transp)
bb_outer_border_color = color.new(bb_outer_color,bb_border_transp)

// BB average
bba_u = math.avg(bbf_u,bbs_u)
bba_l = math.avg(bbf_l,bbs_l)
bba_u2 = math.avg(bbf_u2,bbs_u2)
bba_l2 = math.avg(bbf_l2,bbs_l2)
// Band trend
bba_u_rising = ta.rising(bba_u,2)
bba_l_falling = ta.falling(bba_l,2)
bb_inner_upper_color = bba_u_rising and low > bbs_m ? bb_cloud_trend_up : bb_inner_color
bb_outer_upper_color = bba_u_rising and low > bbs_m ? bb_cloud_trend_up : bb_outer_color
bb_inner_lower_color = bba_l_falling and high < bbs_m ? bb_cloud_trend_dwn : bb_inner_color
bb_outer_lower_color = bba_l_falling and high < bbs_m ? bb_cloud_trend_dwn : bb_outer_color

// Band acceleration cross
bbu_primary_crossover = ta.crossover(bbf_u,bbs_u)
bbu_secondary_crossover = ta.crossover(bbf_u2,bbs_u2)
bbl_primary_crossunder = ta.crossunder(bbf_l,bbs_l)
bbl_secondary_crossunder = ta.crossunder(bbf_l2,bbs_l2)

// Long/Short signals
bb_long_entry = bbu_primary_crossover and bbu_secondary_crossover and bba_u_rising and low > bbs_m and high > bba_u2
bb_short_entry = bbl_primary_crossunder and bbl_secondary_crossunder and bba_l_falling and high < bbs_m and low < bba_l2

//===============================================================================
// Plot
//===============================================================================

bbf_m_plt = plot(bbf_len > 0 and bb_mult_primary > 0 ? bbf_m : na, 'BB fast middle',color = color.new(bb_inner_color,bb_mid_transp),force_overlay = true)
bbs_m_plt = plot(bbs_len > 0 and bb_mult_primary > 0 ? bbs_m : na, 'BB slow middle',color = color.new(bb_outer_color,bb_mid_transp),force_overlay = true)

bbf_u_plt = plot(bbf_len > 0 and bb_mult_primary > 0 ? bbf_u : na, 'BB fast primary upperband',color = color.new(bb_inner_color,bb_border_transp),force_overlay = true)
bbf_l_plt = plot(bbf_len > 0 and bb_mult_primary > 0 ? bbf_l : na, 'BB fast primary lowerband',color = color.new(bb_inner_color,bb_border_transp),force_overlay = true)
bbs_u_plt = plot(bbs_len > 0 and bb_mult_primary > 0 ? bbs_u : na, 'BB slow primary upperband',color = color.new(bb_outer_color,bb_border_transp),force_overlay = true)
bbs_l_plt = plot(bbs_len > 0 and bb_mult_primary > 0 ? bbs_l : na, 'BB slow primary lowerband',color = color.new(bb_outer_color,bb_border_transp),force_overlay = true)

fill(bbf_u_plt,bbs_u_plt,bbf_u,bbs_u,bb_inner_upper_color,bb_outer_upper_color,'BB primary upper fill')
fill(bbf_l_plt,bbs_l_plt,bbf_l,bbs_l,bb_inner_lower_color,bb_outer_lower_color,'BB secondary lower fill')

bbf_u2_plt = plot(bbf_len > 0 and bb_mult_secondary > 0 ? bbf_u2 : na, 'BB fast secondary upperband',color = color.new(bb_inner_color,bb_border_transp),force_overlay = true)
bbf_l2_plt = plot(bbf_len > 0 and bb_mult_secondary > 0 ? bbf_l2 : na, 'BB fast secondary lowerband',color = color.new(bb_inner_color,bb_border_transp),force_overlay = true)
bbs_u2_plt = plot(bbs_len > 0 and bb_mult_secondary > 0 ? bbs_u2 : na, 'BB slow secondary upperband',color = color.new(bb_outer_color,bb_border_transp),force_overlay = true)
bbs_l2_plt = plot(bbs_len > 0 and bb_mult_secondary > 0 ? bbs_l2 : na, 'BB slow secondary lowerband',color = color.new(bb_outer_color,bb_border_transp),force_overlay = true)

fill(bbf_u2_plt,bbs_u2_plt,bbf_u2,bbs_u2,bb_inner_upper_color,bb_outer_upper_color,'BB secondary upper fill')
fill(bbf_l2_plt,bbs_l2_plt,bbf_l2,bbs_l2,bb_inner_lower_color,bb_outer_lower_color,'BB secondary lower fill')

// Long/Short labels
plotshape(bb_long_entry ? bba_u : na, 'BB long entry',style = shape.circle,location = location.absolute, color = color.rgb(157, 225, 159, 70), size = size.large, force_overlay = true)
plotshape(bb_short_entry ? bba_l : na, 'BB short entry',style = shape.circle,location = location.absolute, color = color.rgb(201, 134, 134, 70), size = size.large, force_overlay = true)