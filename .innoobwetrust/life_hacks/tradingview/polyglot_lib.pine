// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ©  InNoobWeTrust

//@version=6

// @description TODO: add library description here
library("polyglot_lib", overlay = false)
import TradingView/ta/9
import forbidden_gun/commonlib/4

//===============================================================================
// Constants
//===============================================================================

const int[] fib_numbers = array.from(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610)

//===============================================================================
// Types
//===============================================================================

export enum MaT
	sma = 'SMA'
	wma = 'WMA'
	ema = 'EMA'

export type PositionPlot
	line tp
	line sl
	line c
	linefill tp_fill
	linefill sl_fill

export type TfBar
    float o
    float h
    float l
    float c
    int t_o
    int t_c

export type TfBarZone
    int period_seconds
    TfBar bar

export type TfBarZonePlot
    line h
    line l
    linefill f

//===============================================================================
// Functions
//===============================================================================

// @function calculate moving average
// @param t type of moving average
// @param src the series to calculate
// @param len averaging length
// @returns the moving average series
export ma(MaT t, float src, simple int len) =>
	switch t
		MaT.sma => ta.sma(src,len)
		MaT.wma => ta.wma(src,len)
		MaT.ema => ta.ema(src,len)

// @function calculate rolling SMA
// @param src the series to calculate
// @param len averaging length
// @param prev_sma the previous value of SMA
// @returns the SMA value
export rolling_sma(float src, simple int len, float prev_sma) =>
	prev_sma * (len - 1) / len + src / len

// @function calculate rolling EMA
// @param src the series to calculate
// @param len averaging length
// @param prev_ema the previous value of EMA
// @returns the EMA value
export rolling_ema(float src, simple int len, float prev_ema) =>
	src * 2 / (len + 1) + prev_ema * (1 - 2 / (len + 1))

// @function calculate liquidity as strength index of 100
// @param len length to calculate ATR
// @returns the relative liquidity index
export relative_liquidity_index(int atr_len, int rli_len) =>
	atr = ta.atr(atr_len)
	rli = ta.rsi(atr,rli_len)
	// Return the RLI
	rli

// @function Calculate safe leverage based on ATR and the percentage of acceptable SL
// @param atr_len The length to calculate ATR
// @param sl_percent The percentage of acceptable SL
// @param mult The ATR multiplier to account for lateness in entry price
// @returns The tuple of: leverage rounded up to whole number, max_endurable_spread, max_endurable_percent
export estimate_leverage(int atr_len = 14, float sl_percent = 0.2, float mult = 1.5) =>
	spread_osc = ta.atr(atr_len)
	max_endurable_spread = spread_osc * mult
	max_endurable_percent = max_endurable_spread / close
	max_leverage = sl_percent / max_endurable_percent
	// Return max leverage as whole number
	[math.ceil(max_leverage), max_endurable_spread, max_endurable_percent]

// @function Display leverage, ATR, and the percentage of acceptable SL
// @param atr_len The length to calculate ATR
// @param sl_percent The percentage of acceptable SL
// @param mult The ATR multiplier to account for lateness in entry price
// @param pos The position to display the table
// @returns The table
export display_lvrg_table(int atr_len = 14, float sl_percent = 0.2, float mult = 1.5, string pos = position.bottom_right, bool overlay = true) =>
	lvrg_tb = overlay ? table.new(pos,2,3,force_overlay = true) : table.new(pos,2,3,force_overlay = false)
	[lvrg, _, _] = estimate_leverage(atr_len,sl_percent,mult)
	atr = ta.atr(atr_len)
	atr_percent = atr / close
	table.cell(lvrg_tb,0,0,'SL',text_color=color.gray,bgcolor=color.new(color.gray, transp = 80))
	table.cell(lvrg_tb,1,0,str.format('{0,number,percent}',sl_percent),bgcolor=color.new(color.gray, transp = 80),text_color=color.red)
	table.cell(lvrg_tb,0,1,'ATR',text_color=color.gray,bgcolor=color.new(color.silver, transp = 80))
	table.cell(lvrg_tb,1,1,str.format('{0,number,#.##}%',atr_percent*100),bgcolor=color.new(color.silver, transp = 80),text_color=color.yellow)
	table.cell(lvrg_tb,0,2,'Lvrg',text_color=color.gray,bgcolor=color.new(color.gray, transp = 80))
	table.cell(lvrg_tb,1,2,str.format('x{0,number,integer}',lvrg),bgcolor=color.new(color.gray, transp = 80),text_color=color.aqua)
	// Return the table id to manage drawings
	lvrg_tb

// @function Display current RSI and SMA of RSI
// @param rsi_len The length to calculate RSI
// @param rsi_sma_len The length to calculate MA of RSI
// @param rsi_sma_type The type of MA to calculate for RSI
// @param pos The position to display the table
// @returns The table
export display_rsi_table(int rsi_len = 14, simple int rsi_ma_len = 14, MaT rsi_ma_type = MaT.sma, string pos = position.middle_right, bool overlay = false) =>
	rsi_tb = overlay ? table.new(pos,1,4,force_overlay = true) : table.new(pos,1,4,force_overlay = false)
	rsi = ta.rsi(close,rsi_len)
	rsi_ma = ma(rsi_ma_type,rsi,rsi_ma_len)
	rsi_color = switch
		rsi >= 70 => color.green
		rsi <= 30 => color.red
		=> color.gray
	rsi_sma_color = switch
		rsi_ma >= 65 => color.teal
		rsi_ma <= 35 => color.orange
		=> color.silver
	table.cell(rsi_tb,0,0,'RSI',text_color=color.gray,bgcolor=color.new(color.gray, transp = 80))
	table.cell(rsi_tb,0,1,str.format('{0,number}',rsi),bgcolor=color.new(color.silver, transp = 80),text_color=rsi_color)
	table.cell(rsi_tb,0,2,'RSI SMA',text_color=color.gray,bgcolor=color.new(color.gray, transp = 80))
	table.cell(rsi_tb,0,3,str.format('{0,number}',rsi_ma),bgcolor=color.new(color.silver, transp = 80),text_color=rsi_sma_color)
	// Return the table id to manage drawings
	rsi_tb


// @function Display current RSI and SMA of RSI and RLI (Relative Liquidity Index)
// @param index_len The length to calculate index
// @param index_ma_len The length to calculate SMA of index values
// @param index_ma_type The type of MA to calculate for index values
// @param atr_len The length to calculate ATR for RLI
// @param pos The position to display the table
// @returns The table
export display_index_table(int index_len = 14, simple int ma_len = 14, MaT ma_type = MaT.sma, int atr_len = 34, string pos = position.middle_right, bool overlay = false) =>
	index_tb = overlay ? table.new(pos,3,3,frame_color = color.white,force_overlay = true) : table.new(pos,3,3,frame_color = color.white,force_overlay = false)
	rsi = ta.rsi(close,index_len)
	rli = relative_liquidity_index(atr_len,index_len)
	rsi_ma = ma(ma_type,rsi,ma_len)
	rli_ma = ma(ma_type,rli,ma_len)
	rsi_color = switch
		rsi >= 70 => color.red
		rsi <= 30 => color.green
		=> color.gray
	rsi_ma_color = switch
		rsi_ma >= 65 => color.yellow
		rsi_ma <= 35 => color.lime
		=> color.silver
	rli_color = switch
		rli >= 70 => color.teal
		rli <= 30 => color.maroon
		=> color.gray
	rli_ma_color = switch
		rli_ma >= 65 => color.aqua
		rli_ma <= 35 => color.orange
		=> color.silver
	table.cell(index_tb,1,0,'Index',text_color=color.gray,bgcolor=color.new(color.gray, transp = 80))
	table.cell(index_tb,2,0,'MA',text_color=color.gray,bgcolor=color.new(color.silver, transp = 80))
	table.cell(index_tb,0,1,'RSI',text_color=color.gray,bgcolor=color.new(color.silver, transp = 80))
	table.cell(index_tb,0,2,'RLI',text_color=color.gray,bgcolor=color.new(color.gray, transp = 80))
	table.cell(index_tb,1,1,str.format('{0,number,integer}',rsi),bgcolor=color.new(color.black, transp = 80),text_color=rsi_color)
	table.cell(index_tb,2,1,str.format('{0,number,integer}',rsi_ma),bgcolor=color.new(color.black, transp = 80),text_color=rsi_ma_color)
	table.cell(index_tb,1,2,str.format('{0,number,integer}',rli),bgcolor=color.new(color.black, transp = 80),text_color=rli_color)
	table.cell(index_tb,2,2,str.format('{0,number,integer}',rli_ma),bgcolor=color.new(color.black, transp = 80),text_color=rli_ma_color)
	// Return the table id to manage drawings
	index_tb

// @function Calculate the pivot left high with cutoff
// @param src The source series
// @param len Pivot length
// @param cutoff Cutoff value, na means no cutoff
// @returns The pivot high with cutoff
export pivot_left_high(float src, int len, float cutoff = na) =>
	pivot_high = ta.pivothigh(src,len,0)
	pivot_high_non_na = ta.valuewhen(not na(pivot_high),pivot_high,0)
	if not na(cutoff)
		// Return the pivot with cutoff
		math.max(pivot_high_non_na,cutoff)
	else
		// Return the non na
		pivot_high_non_na

// @function Calculate the pivot left low with cutoff
// @param src The source series
// @param len Pivot length
// @param cutoff Cutoff value, na means no cutoff
// @returns The pivot low with cutoff
export pivot_left_low(float src, int len, float cutoff = na) =>
	pivot_low = ta.pivotlow(src,len,0)
	pivot_low_non_na = ta.valuewhen(not na(pivot_low),pivot_low,0)
	if not na(cutoff)
		// Return the pivot with cutoff
		math.min(pivot_low_non_na,cutoff)
	else
		// Return the non na
		pivot_low_non_na

// @function Calculate top wick, bottom wick and body in percentage of candle's height
// @param o Open price
// @param h High price
// @param l Low price
// @param c Close price
// @returns Tuple of top wick + bottom wick + body as percentage, body can be negative
export candle_split_percent(float o,float h, float l, float c) =>
	spread = h - l
	body_top = math.max(o,c)
	body_bottom = math.min(o,c)
	body = (c - o) / spread // Can be negative
	top_wick = (h - body_top) / spread
	bottom_wick = (body_bottom - l) / spread
	// Return the wicks and body as percentage
	[top_wick, bottom_wick, body]

// @function Calculate target value by providing target rsi and reverse engineer the formula.
// 			 Reference: https://c.mql5.com/forextsd/forum/138/reverse_engineering_rsi.pdf
// @param len RSI length
// @param target_rsi the target RSI for estimation
// @param src the souce series to calculate
// @returns the reverse engineered value that matches target RSI
export reverse_engineering_rsi(int len, float target_rsi,float src=close) =>
	exp_per = 2 * len - 1
	// Average up src
	uc = src > src[1] ? src - src[1] : 0
	auc = ta.ema(uc, exp_per)
	// Average down src
	dc = src < src[1] ? src[1] - src : 0
	adc = ta.ema(dc, exp_per)
	// x factor
	x = (len - 1) * (adc * target_rsi / (100 - target_rsi) - auc)
	// RevEngRSI
	rev_eng_rsi = x >= 0 ? src + x : src + x * (100 - target_rsi) / target_rsi
	// Return RevEngRSI
	rev_eng_rsi

// @function Calculate target value by providing target rsi and reverse engineer the formula.
// 			 Reference: https://c.mql5.com/forextsd/forum/138/reverse_engineering_rsi.pdf
// @param len RSI length
// @param target_rsi the target RSI for estimation
// @param src the current value to calculate RSI
// @param prev_src the previous value to calculate RSI
// @param prev_auc the previous auc value
// @param prev_adc the previous adc value
// @returns Tuple of RevEngRSI, auc, adc
export rolling_revengrsi(int len, float target_rsi, float src, float prev_src, float prev_auc, float prev_adc) =>
	exp_per = 2 * len - 1
	// New average up
	uc  = src > prev_src ? src - prev_src : 0
	auc = rolling_ema(uc,exp_per,prev_auc)
	// New average down
	dc = prev_src > src ? prev_src - src : 0
	adc = rolling_ema(dc,exp_per,prev_adc)
	// x factor
	x = (len - 1) * (adc * target_rsi / (100 - target_rsi) - auc)
	// RevEngRSI
	rev_eng_rsi = x >= 0 ? src + x : src + x * (100 - target_rsi) / target_rsi
	// Return RevEngRSI, auc, adc
	[rev_eng_rsi, auc, adc]

// @function Draw entry with TP/SL
// @param tp The take profit price
// @param sl The stop loss price
// @param bars The width of the drawing
// @returns The drawings ids
export plot_position_entry(float tp,float sl, int bars) =>
	tp_color = color.new(#40ee40,80)
	tp_fill_color = color.new(#40ee40,90)
	sl_color = color.new(#ee4040,80)
	sl_fill_color = color.new(#ee4040,90)
	tp_plt = line.new(bar_index,tp,bar_index + bars,tp,xloc = xloc.bar_index,color=tp_color,force_overlay = true)
	sl_plt = line.new(bar_index,sl,bar_index + bars,sl,xloc = xloc.bar_index,color=sl_color,force_overlay = true)
	close_plt = line.new(bar_index,close,bar_index+bars,close,xloc = xloc.bar_index,color = color(na),force_overlay = true)
	tp_fill = linefill.new(tp_plt,close_plt,tp_fill_color)
	sl_fill = linefill.new(sl_plt,close_plt,sl_fill_color)
	// Return the drawings
	PositionPlot.new(tp_plt,sl_plt,close_plt,tp_fill,sl_fill)

// @function Clear position plot
// @param pos_plt The plot to clear
export clear_position_plot(PositionPlot pos_plt) =>
	linefill.delete(pos_plt.tp_fill)
	linefill.delete(pos_plt.sl_fill)
	line.delete(pos_plt.c)
	line.delete(pos_plt.tp)
	line.delete(pos_plt.sl)

// @function fill na value from a source with its last non-na
// @param src source series
// @returns the series with filled values using previous data point
export fill_na(series float src) =>
    ta.valuewhen(not na(src), src, 0)

// @function check if the bar is in right timing as specified
// @param bar_time the bar's time in UNIX format
// @param period_seconds the period of bar's timeframe, in seconds
// @param timing the timing, in seconds
// @returns true if timing is within bar's session, false otherwise
export check_bar_time(int bar_open_time, int bar_close_time, int timing) =>
    bar_open_time <= timing and timing < bar_close_time

// @function checking if any timing is within the bar's time using binary search
// @param open_time bar's open time in UNIX format
// @param close_time bar's close time in UNIX format
// @param timings array of timings
// @returns true if any timing is within bar's session, false otherwise
export check_bar_time(int open_time, int close_time, int[] timings) =>
    found = false
	// Try copy and then sort
	sorted_timings = array.copy(timings)
	array.sort(sorted_timings, order.ascending)
	timing_left_idx = array.binary_search_leftmost(sorted_timings,open_time)
	timing_right_idx = array.binary_search_rightmost(sorted_timings,close_time)
    if timing_right_idx - timing_left_idx > 0
		for idx = timing_left_idx to timing_right_idx
			timing = sorted_timings.get(idx)
			if check_bar_time(open_time,close_time,timing)
				found := true
				break
    found

// @function check if current bar just broke resistance level
// @param resistance the resistance level
// @returns true if broke, false otherwise
export resistance_breakout(float resistance) =>
    // Breakout if previous bar touches the level but current bar is higher than level
    low > resistance and low[1] <= resistance

// @function check if current bar just broke support level
// @param support the support level
// @returns true if broke, false otherwise
export support_breakout(float support) =>
    // Breakout if previous bar touches the level but current bar is lower than level
    high < support and high[1] >= support

// @function Plot the price zone of TfBar
// @param z Zone data of TfBar
// @param clr Color for the zone
export plot_tf_zone(TfBarZone z, color clr) =>
    // Line for high value
    h = line.new(time, z.bar.h, time_close, z.bar.h, xloc = xloc.bar_time,extend = extend.right, color = clr, style = line.style_solid, force_overlay = true)
    l = line.new(time, z.bar.l, time_close, z.bar.l, xloc = xloc.bar_time,extend = extend.right, color = clr, style = line.style_solid, force_overlay = true)
    f = linefill.new(h,l,clr)
    TfBarZonePlot.new(h,l,f)

// @function Clear plotted TfBarZone
// @param z Plot data
export clear_tf_zone(TfBarZonePlot z) =>
	linefill.delete(z.f)
	line.delete(z.h)
	line.delete(z.l)

//===============================================================================
// Testing
//===============================================================================

// TR convergence divergence + bands
//-------------------------------------------------------------------------------
trcd_grp = '► True Range Convergence Divergence'

trcd_fast_len = input.int(34,'TR fast length',group = trcd_grp)
trcd_slow_len = input.int(144,'TR slow length',group = trcd_grp)
trcd_sig_len = input.int(9,'TR signal length',group = trcd_grp)

[trcd,tr_sig,tr_hist] = ta.macd(ta.tr(true),trcd_fast_len,trcd_slow_len,trcd_sig_len)

tr_rising = ta.rising(tr_hist,1)
tr_falling = ta.falling(tr_hist,1)
tr_converging = ta.falling(math.abs(tr_hist),1)
tr_diverging = ta.rising(math.abs(tr_hist),1)

trcd_areacolor = switch trcd >=0
	true => color.new(color.teal,70)
	false => color.new(color.red,70)
trcd_diffcolor = switch tr_hist > 0
	true => color.new(color.aqua,80)
	false => color.new(color.yellow,80)
trcd_histcolor = switch tr_hist > 0
	true => tr_diverging ? color.new(color.teal,40) : color.new(color.lime,40)
	false => tr_diverging ? color.new(color.red,40) : color.new(color.orange,40)
trcd_plt = plot(trcd, 'TRCD',color=color(na),linewidth = 1,force_overlay = false)
trcd_fillplt = plot(trcd >= 0 ? math.min(trcd,tr_sig) : math.max(trcd,tr_sig), 'TRCD area filling',color=trcd_areacolor,style = plot.style_histogram,force_overlay = false)
tr_sig_plt = plot(tr_sig, 'TR signal',color=color(na),linewidth = 1,force_overlay = false)
fill(trcd_plt,tr_sig_plt,trcd_diffcolor,'TR convergence divergence')

tr_hist_plt = plot(tr_hist,'TR hist',color=trcd_histcolor,style = plot.style_columns,force_overlay = false)

// RLI
//-------------------------------------------------------------------------------
rli_grp = '► Scaled Relative Liquidity Index'

rli_enable = input.bool(true,'Enable',group = rli_grp)
rli_atr_len = input.int(34,"RLI's ATR length",group = rli_grp)
rli_len = input.int(14,'RLI length',group = rli_grp)
rli_low_color = input.color(color.new(color.red,25),'Low liquidity color',group = rli_grp)
rli_high_color = input.color(color.new(color.teal,25),'High liquidity color',group = rli_grp)
rli_gradient_bg_enable = input.bool(false,'Show gradient background',group = rli_grp)
rli_gradient_bg_transparency = input.int(85,'Gradient transparency',minval=0,maxval=100,group = rli_grp)

rli = relative_liquidity_index(rli_atr_len,rli_len)
shifted_rli = rli - 50
scaled_rli = shifted_rli * math.max(math.abs(trcd),math.abs(tr_sig)) / 50

rli_atr = ta.atr(rli_atr_len)

rli_color = color.from_gradient(rli,0,100,rli_low_color,rli_high_color)
plot(rli_enable ? scaled_rli : na,'Scaled RLI',color = rli_color,linewidth = 2,force_overlay = false)

bgcolor(rli_enable and rli_gradient_bg_enable ? color.new(rli_color,rli_gradient_bg_transparency) : color(na),force_overlay = true)

// Key gap
//-------------------------------------------------------------------------------
key_gap_grp = '► Key gaps'
key_gap_enable = input.bool(true, 'Enable', group = key_gap_grp)
key_gap_atr_len = input.int(34, 'base ATR length', group = key_gap_grp)
key_gap_threshold = input.float(2.618, 'ATR mult',group = key_gap_grp)
key_gap_body_percent = input.float(0.618, 'Min body percent', minval=0, maxval=1,group = key_gap_grp)
key_gap_plot_last = input.int(3, 'Plot last', minval = 0, group = key_gap_grp)
key_gap_gradient_inline = 'Key gap gradient'
key_gap_gradient_low = input.color(color.new(color.red, 90), key_gap_gradient_inline, group = key_gap_grp, inline = key_gap_gradient_inline)
key_gap_gradient_high = input.color(color.new(color.teal, 90), '', group = key_gap_grp, inline = key_gap_gradient_inline)

var array<TfBarZone> key_gaps = array.new<TfBarZone>(key_gap_plot_last, na)
var array<TfBarZonePlot> key_gaps_plt = array.new<TfBarZonePlot>(key_gap_plot_last, na)

key_gap_atr = ta.atr(key_gap_atr_len)
key_gap_candle_spread_mult = (high - low) / key_gap_atr[1]
candle_is_key = key_gap_candle_spread_mult >= key_gap_threshold and commonlib.bar_body_percent() >= key_gap_body_percent

if candle_is_key and key_gap_plot_last > 0
	// Remove old gaps
	key_gaps.shift()

	tf_secs = timeframe.in_seconds()
	bar = TfBar.new(open, high, low, close, time, time_close)
	bar_zone = TfBarZone.new(tf_secs, bar)
	key_gaps.push(bar_zone)

	if key_gap_enable
		// Remove and clear old plots
		oldest_zone_plt = key_gaps_plt.shift()
		if not na(oldest_zone_plt)
			clear_tf_zone(oldest_zone_plt)

		clr = color.from_gradient(key_gap_candle_spread_mult, 1.618, 4.236, key_gap_gradient_low, key_gap_gradient_high)
		plt = plot_tf_zone(bar_zone, clr)
		key_gaps_plt.push(plt)

key_levels = array.new<float>()
for zone in key_gaps
	if not na(zone)
		key_levels.push(zone.bar.l)
		key_levels.push(zone.bar.h)
key_levels.sort()

// Biased candle
//-------------------------------------------------------------------------------
biased_candle_grp = '► Biased candle'
biased_candle_enable = input.bool(true,'Enable',group = biased_candle_grp)

[top_wick, bottom_wick, body] = candle_split_percent(open,high,low,close)
candle_wick_bias = bottom_wick >= 0.5 ? 1 : top_wick >= 0.5 ? -1 : na
candle_bias = (ohlc4 - low) / (high - low)
candle_bias_rising = ta.rising(ohlc4,1)
candle_bias_falling = ta.falling(ohlc4,1)
candle_rising = candle_wick_bias > 0 and candle_bias >= 0.5
candle_falling = candle_wick_bias < 0 and candle_bias < 0.5

candle_strictly_rising = candle_rising and candle_bias_falling
candle_strictly_falling = candle_falling and candle_bias_rising

// plot(not candle_rising and not candle_falling ? ohlc4 : na,'Price balance',style = plot.style_linebr,linewidth = 2, color = color.silver,force_overlay = true)
plotshape(biased_candle_enable and candle_strictly_rising,'Biased candle rising',style=shape.triangleup,location=location.belowbar,color=color.green,force_overlay = true)
plotshape(biased_candle_enable and candle_strictly_falling,'Biased candle falling',style=shape.triangledown,location=location.abovebar,color=color.red,force_overlay = true)

// Leverage table
//-------------------------------------------------------------------------------
lvrg_tb_grp = '► Leverage table'
lvrg_tb_enable = input.bool(false,'Enable',group = lvrg_tb_grp)
lvrg_tb_mult = input.float(2,'Multiplier',group = lvrg_tb_grp)
lvrg_tb_position = input.string(position.top_right,'Position',options = [position.bottom_center,position.bottom_left,position.bottom_right,position.middle_center,position.middle_left,position.middle_right,position.top_center,position.top_left,position.top_right],group = lvrg_tb_grp)
lvrg_tb_overlay = input.bool(true,'Overlay',group = lvrg_tb_grp)

var table lvrg_tb = na

// Update leverage table
if lvrg_tb_enable
	lvrg_tb := display_lvrg_table(atr_len = trcd_slow_len, mult = lvrg_tb_mult,pos = lvrg_tb_position,overlay = lvrg_tb_overlay)


// RSI + RLI (Relative Liquidity Index) table
//-------------------------------------------------------------------------------
index_tb_grp = '► Index table'
index_tb_enable = input.bool(true,'Enable',group = index_tb_grp)
index_tb_position = input.string(position.middle_right,'Position',options = [position.bottom_center,position.bottom_left,position.bottom_right,position.middle_center,position.middle_left,position.middle_right,position.top_center,position.top_left,position.top_right],group = index_tb_grp)
index_tb_overlay = input.bool(false,'Overlay',group = index_tb_grp)
index_len = input.int(14,'Index length',group = index_tb_grp)
index_ma_inline = 'Index MA'
index_ma_type = input.enum(MaT.sma,index_ma_inline,group = index_tb_grp,inline = index_ma_inline)
index_ma_len = input.int(14,'',group = index_tb_grp,inline = index_ma_inline)
index_atr_len = input.int(34,'Index ATR length',group = index_tb_grp)


var table index_tb = na

// Update leverage table
if index_tb_enable
	index_tb := display_index_table(index_len = index_len,ma_len = index_ma_len,ma_type = index_ma_type,atr_len = index_atr_len,pos = index_tb_position,overlay = index_tb_overlay)

// Overbought/Oversold price by reverse engineering RSI
//-------------------------------------------------------------------------------
revengrsi_grp = '► Reverse Engineering RSI'
revengrsi_enable = input.bool(true,'Enable',group = revengrsi_grp,tooltip = 'Ref: https://c.mql5.com/forextsd/forum/138/reverse_engineering_rsi.pdf')
revengrsi_len = input.int(17,'Length',group = revengrsi_grp)
revengrsi_ghost_inline = 'Ghost high/low'
revengrsi_ghost_enable = input.bool(false,revengrsi_ghost_inline,group = revengrsi_grp,inline = revengrsi_ghost_inline)
revengrsi_ghost_len = input.int(9,'Length',group = revengrsi_grp,inline = revengrsi_ghost_inline)
revengrsi_ghost_oversold_threshold = input.float(30,'Oversold',group = revengrsi_grp,inline = revengrsi_ghost_inline)
revengrsi_ghost_overbought_threshold = input.float(70,'Overbought',group = revengrsi_grp,inline = revengrsi_ghost_inline)
revengrsi_multi_middle_inline = 'Alternate middle multi-length'
revengrsi_multi_middle_enable = input.bool(true,revengrsi_multi_middle_inline,group = revengrsi_grp,inline = revengrsi_multi_middle_inline)
revengrsi_multi_middle_len1 = input.int(129,'',group = revengrsi_grp,inline = revengrsi_multi_middle_inline)
revengrsi_multi_middle_len2 = input.int(305,'',group = revengrsi_grp,inline = revengrsi_multi_middle_inline)

equilibrium_threshold = reverse_engineering_rsi(revengrsi_len,50)
equilibrium_plt = plot(revengrsi_enable ? equilibrium_threshold : na,'Equilibrium Threshold', color = color.new(color.silver,70),style = plot.style_circles,force_overlay = true)

ghost_overbought_threshold = reverse_engineering_rsi(revengrsi_ghost_len,revengrsi_ghost_overbought_threshold, high)
ghost_oversold_threshold = reverse_engineering_rsi(revengrsi_ghost_len,revengrsi_ghost_oversold_threshold,low)

ghost_overbought_plt = plot(revengrsi_enable and revengrsi_ghost_enable ? ghost_overbought_threshold : na,'Ghost Overbought Threshold', color = color.new(color.red,80),force_overlay = true)
ghost_oversold_plt = plot(revengrsi_enable and revengrsi_ghost_enable ? ghost_oversold_threshold : na,'Ghost Oversold Threshold', color = color.new(color.green,80),force_overlay = true)

equilibrium_multi1 = revengrsi_enable and revengrsi_multi_middle_enable ? reverse_engineering_rsi(revengrsi_multi_middle_len1,50) : na
equilibrium_multi2 = revengrsi_enable and revengrsi_multi_middle_enable ? reverse_engineering_rsi(revengrsi_multi_middle_len2,50) : na

equilibrium_multi1_plt = plot(revengrsi_enable and revengrsi_multi_middle_enable ? equilibrium_multi1 : na,'Multi middle #1',color=color.new(color.silver,80),linewidth = 2,force_overlay = true)
equilibrium_multi2_plt = plot(revengrsi_enable and revengrsi_multi_middle_enable ? equilibrium_multi2 : na,'Multi middle #2',color=color.new(color.silver,85),linewidth = 3,force_overlay = true)

// Bollinger Bands
//-------------------------------------------------------------------------------
bb_grp = '► Bollinger Bands multi-length'
bb_enable = input.bool(true,'Enable',group = bb_grp)
bb_src = input.source(close,'Source',group = bb_grp)
bb_len_inline = 'Length'
bbf_len = input.int(34,bb_len_inline,group = bb_grp,inline = bb_len_inline)
bbs_len = input.int(89,'',group = bb_grp,inline = bb_len_inline)
bb_mult = input.float(2,'Mult',group = bb_grp)
bbf_color = input.color(color.new(color.aqua,85),'Fast color',group = bb_grp)
bbs_color = input.color(color.new(color.yellow,85),'Slow color',group = bb_grp)
bb_line_transp = input.int(85,'BB line transparency',minval=0,maxval=100,group = bb_grp)
[bbf_m,bbf_u,bbf_l] = ta.bb(bb_src,bbf_len,bb_mult)
[bbs_m,bbs_u,bbs_l] = ta.bb(bb_src,bbs_len,bb_mult)

bbf_u_plt = plot(bb_enable ? bbf_u : na, 'BB fast upperband',color = color.new(bbf_color,bb_line_transp),force_overlay = true)
bbf_l_plt = plot(bb_enable ? bbf_l : na, 'BB fast lowerband',color = color.new(bbf_color,bb_line_transp),force_overlay = true)
bbs_u_plt = plot(bb_enable ? bbs_u : na, 'BB slow upperband',color = color.new(bbs_color,bb_line_transp),force_overlay = true)
bbs_l_plt = plot(bb_enable ? bbs_l : na, 'BB slow lowerband',color = color.new(bbs_color,bb_line_transp),force_overlay = true)
fill(bbf_u_plt,bbs_u_plt,bbf_u,bbs_u,bbf_color,bbs_color,'BB upper fill')
fill(bbf_l_plt,bbs_l_plt,bbf_l,bbs_l,bbf_color,bbs_color,'BB lower fill')

// MA
//-------------------------------------------------------------------------------
ma_grp = '► Moving average'
ma_enable = input.bool(false, 'Enable',group = ma_grp)
ma_pair_inline = 'MA pair'
ma_type = input.enum(MaT.sma,ma_pair_inline,group = ma_grp,inline = ma_pair_inline)
ma_src = input.source(close,'',group = ma_grp,inline = ma_pair_inline)
ma_fast_len = input.int(34,'',group = ma_grp,inline = ma_pair_inline)
ma_slow_len = input.int(89,'',group = ma_grp,inline = ma_pair_inline)
ma_up_cloud_color = input.color(color.new(color.teal,85),'MA up cloud',group = ma_grp)
ma_down_cloud_color = input.color(color.new(color.red,85),'MA down cloud',group = ma_grp)

ma_fast = ma(ma_type,ma_src,ma_fast_len)
ma_slow = ma(ma_type,ma_src,ma_slow_len)
ma_diff = ma_fast - ma_slow

ma_rising = ta.rising(ma_slow,1)
ma_falling = ta.falling(ma_slow,1)
ma_converging = ta.falling(ma_diff,1)
ma_diverging = ta.rising(ma_diff,1)

ma_fast_plt = plot(ma_enable ? ma_fast : na,'MA fast',color.new(color.blue,95),force_overlay = true)
ma_slow_plt = plot(ma_enable ? ma_slow : na,'MA slow',color.new(color.orange,95),linewidth = 2,force_overlay = true)
fill(ma_fast_plt,ma_slow_plt,ma_diff >= 0 ? ma_up_cloud_color : ma_down_cloud_color)

test_ma = switch ma_diverging
	true => low > ma_slow and high < ma_fast
	false => high < ma_slow and low > ma_fast
// Colored background for candles that stuck between the ma lines
plotcandle(ma_enable and close >= open ? low : high,ma_enable and test_ma ? high : na,ma_enable and test_ma ? low : na,ma_enable and close>=open ? high : low,color=close>=open ? color.new(color.teal,70) : color.new(color.red,70),bordercolor = close>=open ? color.new(color.teal,70) : color.new(color.red,70),force_overlay = true)

// Demand/Supply zones (Elliott's single full cycle of 8 waves)
//-------------------------------------------------------------------------------
demand_supply_grp = '► Demand/Supply zones'
demand_supply_draw_zone = input.bool(false, 'Draw price zones', group = demand_supply_grp)
demand_supply_pivot_len = input.int(8,'Pivot length',group = demand_supply_grp)
demand_supply_zone_color_inline = 'Zone colors (demand/supply)'
demand_supply_zone_color_demand = input.color(color.new(color.olive,90),demand_supply_zone_color_inline,group = demand_supply_grp,inline = demand_supply_zone_color_inline)
demand_supply_zone_color_supply = input.color(color.new(color.red,90),'',group = demand_supply_grp,inline = demand_supply_zone_color_inline)
demand_supply_draw_pivot_profile = input.bool(true,'Draw pivot profile',group = demand_supply_grp)
demand_supply_pivot_profile_bars = input.int(32,'Profile bars',group = demand_supply_grp)
demand_supply_pivot_profile_span = input.int(8,'Span',group = demand_supply_grp)
demand_supply_pivot_profile_offset = input.int(2,'Offset',group = demand_supply_grp)

demand_price = pivot_left_low(low,demand_supply_pivot_len)
pivot_low = ta.pivotlow(demand_supply_pivot_len,0)
demand_zone = ta.valuewhen(not na(pivot_low),math.min(open,close),0)
supply_price = pivot_left_high(high,demand_supply_pivot_len)
pivot_high = ta.pivothigh(demand_supply_pivot_len,0)
supply_zone = ta.valuewhen(not na(pivot_high),math.max(open,close),0)
demand_supply_balance = (close - demand_zone) / ((close - demand_zone) + (supply_zone - close))

close_plt = plot(close,'Close price',color=color(na),force_overlay = true)
demand_price_plt = plot(demand_supply_draw_zone ? demand_price : na,'Demand price',color=color.new(color.olive,85),force_overlay = true)
demand_zone_plt = plot(demand_supply_draw_zone ? demand_zone : na,'Demand zone',color=color.new(color.olive,75),force_overlay = true)
supply_price_plt = plot(demand_supply_draw_zone ? supply_price : na,'Supply price',color=color.new(color.red,85),force_overlay = true)
supply_zone_plt = plot(demand_supply_draw_zone ? supply_zone : na,'Supply zone',color=color.new(color.red,75),force_overlay = true)
fill(demand_price_plt,close_plt,color=demand_supply_zone_color_demand)
fill(supply_price_plt,close_plt,color=demand_supply_zone_color_supply)

// Pivot profile
max_pivots = demand_supply_pivot_profile_bars * demand_supply_pivot_profile_span
max_pivots_cutoff = max_pivots / demand_supply_pivot_profile_span
var float[] pivots = array.new<float>(max_pivots)
// Scaled profile histogram
var line[] pivot_profile_lines = array.new<line>(demand_supply_pivot_profile_bars,na)
var line[] pivot_poc_lines = array.new<line>()

// Add new pivots
for p in array.from(pivot_low,pivot_high)
	if not na(p)
		pivots.push(p)

// Shrink the original array to max capacity
while pivots.size() > max_pivots
	pivots.shift()

// Sorted pivots for finding nearest key levels
sorted_pivots = pivots.copy()
// Sort the arrays
sorted_pivots.sort(order.ascending)

// Take only pivots around the last close price
pivots_stdev = sorted_pivots.stdev()
pivot_low_cutoff = close[1] - pivots_stdev
pivot_high_cutoff = close[1] + pivots_stdev
pivot_low_offset_idx = sorted_pivots.binary_search_leftmost(pivot_low_cutoff)
pivot_high_offset_idx = sorted_pivots.binary_search_rightmost(pivot_high_cutoff)
// Cutoff the sorted array
if pivot_high_offset_idx - pivot_low_offset_idx > 1
	sorted_pivots := sorted_pivots.slice(math.max(0,pivot_low_offset_idx), math.min(pivot_high_offset_idx, sorted_pivots.size() - 1))
else
	pivot_offset_idx = sorted_pivots.binary_search_leftmost(close[1])
	sorted_pivots := sorted_pivots.slice(math.max(0,pivot_offset_idx - max_pivots_cutoff), math.min(pivot_offset_idx + max_pivots_cutoff, sorted_pivots.size() - 1))

// Calculate delta price for each profile bar
pivot_profile_lowest = sorted_pivots.first()
pivot_profile_delta = (sorted_pivots.last() - sorted_pivots.first()) / demand_supply_pivot_profile_bars
pivot_profile_hist = array.new<int>(demand_supply_pivot_profile_bars,0)
for i = 0 to demand_supply_pivot_profile_bars - 1
	profile_bar_l = pivot_profile_lowest + pivot_profile_delta * (i - 0.5)
	profile_bar_h = profile_bar_l + pivot_profile_delta
	// Optimize loop by only looping till the value below profile_bar_h
	max_idx = sorted_pivots.binary_search_rightmost(profile_bar_h)
	for j = 0 to max_idx
		pivot = sorted_pivots.get(j)
		if profile_bar_l <= pivot and pivot < profile_bar_h
			count = pivot_profile_hist.get(i)
			count += 1
			pivot_profile_hist.set(i,count)

// Plot pivot profile
if demand_supply_draw_pivot_profile and barstate.islast
	pivot_profile_bar_index = bar_index + demand_supply_pivot_profile_offset
	// pivot_hist_max_nth = pivot_profile_hist.max(1)
	// pivot_hist_max_nth_price = pivot_profile_lowest + pivot_profile_delta / 2 * array.indexof(pivot_profile_hist,array.max(pivot_profile_hist,1))

	for l in pivot_profile_lines
		line.delete(l)
	// for l in pivot_poc_lines
	// 	line.delete(l)
	// pivot_poc_lines.clear()
	for i = 0 to demand_supply_pivot_profile_bars - 1
		profile_bar_avg = pivot_profile_lowest + pivot_profile_delta * i / 2.
		hist_value = array.get(pivot_profile_hist,i)
		l = line.new(x1 = pivot_profile_bar_index + hist_value,
				 	 y1 = profile_bar_avg,
				 	 x2 = pivot_profile_bar_index,
				 	 y2 = profile_bar_avg,
				 	 xloc = xloc.bar_index,
				 	 extend = extend.none,
				 	 color = color.new(color.orange,70),
				 	 style = line.style_solid,
				 	 width = 2,
				 	 force_overlay = true)
		pivot_profile_lines.set(i,l)
		// if hist_value >= pivot_hist_max_nth
		// 	poc = line.new(x1 = pivot_profile_bar_index - hist_value,
		// 			 	   y1 = profile_bar_avg,
		// 			 	   x2 = pivot_profile_bar_index,
		// 			 	   y2 = profile_bar_avg,
		// 			 	   xloc = xloc.bar_index,
		// 			 	   extend = extend.left,
		// 			 	   color = hist_value > pivot_hist_max_nth ? color.new(color.red,90) : color.new(color.yellow,90),
		// 			 	   style = line.style_solid,
		// 			 	   width = 1,
		// 			 	   force_overlay = true)
		// 	pivot_poc_lines.push(poc)

// Biased candle for reversal signal, atr signal low volatility environment that supports reversal
//-------------------------------------------------------------------------------
position_grp = '► Long/Short entries'
position_enable = input.bool(true,'Enable',group = position_grp)

pos_atr = ta.atr(34)
pos_rsi = ta.rsi(close,index_len)
pos_rli = relative_liquidity_index(index_atr_len,index_len)
pos_rsi_high = pos_rsi > 60
pos_rsi_low = pos_rsi < 40
high_liquidity = pos_rli > 60
high_spread = (high - low) / pos_atr[1] >= 1.618

// Signal + liquidity + spread
signal_filter = position_enable and high_spread
long_signal = signal_filter and candle_rising
short_signal = signal_filter and candle_falling

nearest_lower_pivot = array.get(sorted_pivots, array.binary_search_leftmost(sorted_pivots,bbf_l))
nearest_higher_pivot = array.get(sorted_pivots, array.binary_search_rightmost(sorted_pivots,bbf_u) - 1)
if key_levels.size() > 0
	// nearest_lower_pivot := key_levels.first()
	// nearest_higher_pivot := key_levels.last()
	max_range = 0.
	for zone in key_gaps
		if na(zone)
			continue
		if zone.bar.h - zone.bar.l <= max_range
			continue
		max_range := zone.bar.h - zone.bar.l
		nearest_lower_pivot := zone.bar.l
		nearest_higher_pivot := zone.bar.h

sl = long_signal ? math.min(low - 1.5 * pos_atr, nearest_lower_pivot) : short_signal ? math.max(high + 1.5 * pos_atr, nearest_higher_pivot) : na
tp = long_signal ? nearest_higher_pivot : short_signal ? nearest_lower_pivot : na

rr = long_signal or short_signal ? (tp - close) / (close - sl) : na
desired_winrate = 0.5
desired_rr = desired_winrate / (1 - desired_winrate)
is_satisfactory_rr = math.abs(rr) >= desired_rr
[lvrg,max_endurable_spread, _] = estimate_leverage(89,0.2,3)
is_safe_sl = math.abs(close - sl) < max_endurable_spread

scalp_entry_up = long_signal and is_satisfactory_rr and is_safe_sl
scalp_entry_down = short_signal and is_satisfactory_rr and is_safe_sl

// plotchar(scalp_entry_up,'Biased candle rising',char='L',location=location.belowbar,size = size.tiny,color=color.green,force_overlay = true)
// plotchar(scalp_entry_down,'Biased candle falling',char='S',location=location.abovebar,size = size.tiny,color=color.red,force_overlay = true)

// var PositionPlot[] pos_plts = array.new<PositionPlot>()
if scalp_entry_up or scalp_entry_down
	label.new(x=bar_index, y = scalp_entry_down ? low : high,text = str.format('x{0,number,integer}',lvrg),xloc = xloc.bar_index,yloc = scalp_entry_up ? yloc.belowbar : yloc.abovebar,color=scalp_entry_up ? color.green : color.red,style = label.style_text_outline,size=size.small,force_overlay = true)
	plt = plot_position_entry(tp,sl,3)
	log_msg = if scalp_entry_up
		str.format('Long: {0,number}, TP: {1,number}, SL: {2,number}, RR: {3,number,percent}',close,tp,sl,rr)
	else if scalp_entry_down
		str.format('Short: {0,number}, TP: {1,number}, SL: {2,number}, RR: {3,number,percent}',close,tp,sl,rr)
	log.info(log_msg)
	alert(log_msg)
	// array.push(pos_plts, plt)
	// if pos_plts.size() > 10
	// 	old_plt = array.shift(pos_plts)
	// 	clear_position_plot(old_plt)