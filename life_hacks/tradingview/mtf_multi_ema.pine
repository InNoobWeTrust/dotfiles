// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © InNoobWeTrust

//@version=5
indicator("Noob's MTF multi-EMA", overlay=true)
import TradingView/ta/8
import forbidden_gun/ma_lib/2

//=============================================================================
// MTF multi-emas
//=============================================================================

// Input
//-----------------------------------------------------------------------------{
ema1_grp = "► EMA fast"
ema1_inline = "EMA fast"
ema1_enable = input.bool(true, '', group = ema1_grp, inline = ema1_inline)
ema1_len = input.int(34, '', group = ema1_grp, inline = ema1_inline)
ema1_color = input.color(color.blue, '', group = ema1_grp, inline = ema1_inline)
ema1_max_tf = input.int(5, 'Max timeframes to show', minval=1,maxval=5, group = ema1_grp)
ema1_band_inline = 'HL bands'
ema1_band_enable = input.bool(true, ema1_band_inline, ema1_band_inline, group = ema1_grp, inline = ema1_band_inline)
ema1_band_color = input.color(color.new(color.blue, transp = 80), '', group = ema1_grp, inline = ema1_band_inline)

ema2_grp = "► EMA slow"
ema2_inline = "EMA slow"
ema2_enable = input.bool(true, '', group = ema2_grp, inline = ema2_inline)
ema2_len = input.int(89, '', group = ema2_grp, inline = ema2_inline)
ema2_color = input.color(color.orange, '', group = ema2_grp, inline = ema2_inline)
ema2_max_tf = input.int(5, 'Max timeframes to show', minval=1,maxval=5, group = ema2_grp)

ema3_grp = "► EMA long term"
ema3_inline = "EMA long term"
ema3_enable = input.bool(false, '', group = ema3_grp, inline = ema3_inline)
ema3_len = input.int(610, '', group = ema3_grp, inline = ema3_inline)
ema3_color = input.color(color.silver, '', group = ema3_grp, inline = ema3_inline)
ema3_max_tf = input.int(5, 'Max timeframes to show', minval=1,maxval=5, group = ema3_grp)

tf_grp = "► Timeframes"
tf_inline = "Timeframes cfg"
tf1 = input.timeframe('1', '', group = tf_grp, inline = tf_inline)
tf2 = input.timeframe('5', '', group = tf_grp, inline = tf_inline)
tf3 = input.timeframe('30', '', group = tf_grp, inline = tf_inline)
tf4 = input.timeframe('240', '', group = tf_grp, inline = tf_inline)
tf5 = input.timeframe('D', '', group = tf_grp, inline = tf_inline)

smooth = input.bool(false, 'Smooth lines', tooltip = 'Enable this option will make ema lines in higher timeframes lag behind current bar')
variable_width = input.bool(false, 'Variable line width', tooltip = 'Increase line width for higher timeframes')
//-----------------------------------------------------------------------------}

// Calculation
//-----------------------------------------------------------------------------{
type EmaTf
    string tf
    int len
    float ema
    float ema_filled
    color clr

ema_tf(simple string tf, simple int len, src, simple bool smooth = false) =>
    request.security(syminfo.tickerid, tf, ta.ema(src, len), smooth ? barmerge.gaps_on : barmerge.gaps_off, smooth ? barmerge.lookahead_on : barmerge.lookahead_off)

newEma(string tf, simple int len, simple color clr, simple bool render) =>
    if render
        ema = ema_tf(tf,len, close, smooth)
        ema_filled = ta.valuewhen(not na(ema), ema, 0)
        EmaTf.new(tf, len, ema, ema_filled, clr)
    else
        EmaTf.new(na, na, na, na, color(na))

countdown(simple string tf) =>
    if timeframe.in_seconds(timeframe.period) < timeframe.in_seconds(tf)
        time_left = int(time_close(tf) - timenow)
    else
        na

fmt_countdown(simple string tf) =>
    cntdwn = countdown(tf)
    if not na(cntdwn)
        cntdwn := cntdwn / 1000
        hh = int(cntdwn / 3600)
        mm = int((cntdwn % 3600) / 60)
        ss = int(cntdwn % 60)
        str.format('ETA: {0,number,00}:{1,number,00}:{2,number,00}', hh,mm,ss)
    else
        'ETA: -- : -- : --'

// Timeframes
string[] tfs = array.from(tf1,tf2,tf3,tf4,tf5)
// EMA data
EmaTf[] ema1 = array.new<EmaTf>()
ema1.push(newEma(tf1, ema1_len, ema1_color, ema1_enable and 1 <= ema1_max_tf))
ema1.push(newEma(tf2, ema1_len, ema1_color, ema1_enable and 2 <= ema1_max_tf))
ema1.push(newEma(tf3, ema1_len, ema1_color, ema1_enable and 3 <= ema1_max_tf))
ema1.push(newEma(tf4, ema1_len, ema1_color, ema1_enable and 4 <= ema1_max_tf))
ema1.push(newEma(tf5, ema1_len, ema1_color, ema1_enable and 5 <= ema1_max_tf))

float[] ema1_h = array.new<float>()
ema1_h.push(ema1_enable and ema1_band_enable and 1 <= ema1_max_tf ? ema_tf(tf1, ema1_len, high, smooth) : na)
ema1_h.push(ema1_enable and ema1_band_enable and 2 <= ema1_max_tf ? ema_tf(tf2, ema1_len, high, smooth) : na)
ema1_h.push(ema1_enable and ema1_band_enable and 3 <= ema1_max_tf ? ema_tf(tf3, ema1_len, high, smooth) : na)
ema1_h.push(ema1_enable and ema1_band_enable and 4 <= ema1_max_tf ? ema_tf(tf4, ema1_len, high, smooth) : na)
ema1_h.push(ema1_enable and ema1_band_enable and 5 <= ema1_max_tf ? ema_tf(tf5, ema1_len, high, smooth) : na)

float[] ema1_l = array.new<float>()
ema1_l.push(ema1_enable and ema1_band_enable and 1 <= ema1_max_tf ? ema_tf(tf1, ema1_len, low, smooth) : na)
ema1_l.push(ema1_enable and ema1_band_enable and 2 <= ema1_max_tf ? ema_tf(tf2, ema1_len, low, smooth) : na)
ema1_l.push(ema1_enable and ema1_band_enable and 3 <= ema1_max_tf ? ema_tf(tf3, ema1_len, low, smooth) : na)
ema1_l.push(ema1_enable and ema1_band_enable and 4 <= ema1_max_tf ? ema_tf(tf4, ema1_len, low, smooth) : na)
ema1_l.push(ema1_enable and ema1_band_enable and 5 <= ema1_max_tf ? ema_tf(tf5, ema1_len, low, smooth) : na)

EmaTf[] ema2 = array.new<EmaTf>()
ema2.push(newEma(tf1, ema2_len, ema2_color, ema2_enable and 1 <= ema2_max_tf))
ema2.push(newEma(tf2, ema2_len, ema2_color, ema2_enable and 2 <= ema2_max_tf))
ema2.push(newEma(tf3, ema2_len, ema2_color, ema2_enable and 3 <= ema2_max_tf))
ema2.push(newEma(tf4, ema2_len, ema2_color, ema2_enable and 4 <= ema2_max_tf))
ema2.push(newEma(tf5, ema2_len, ema2_color, ema2_enable and 5 <= ema2_max_tf))

EmaTf[] ema3 = array.new<EmaTf>()
ema3.push(newEma(tf1, ema3_len, ema3_color, ema3_enable and 1 <= ema3_max_tf))
ema3.push(newEma(tf2, ema3_len, ema3_color, ema3_enable and 2 <= ema3_max_tf))
ema3.push(newEma(tf3, ema3_len, ema3_color, ema3_enable and 3 <= ema3_max_tf))
ema3.push(newEma(tf4, ema3_len, ema3_color, ema3_enable and 4 <= ema3_max_tf))
ema3.push(newEma(tf5, ema3_len, ema3_color, ema3_enable and 5 <= ema3_max_tf))

// Market structure data
float[] ema_trends = array.new<float>()
for idx = 0 to 4
    fast = ema1.get(idx).ema_filled
    slow = ema2.get(idx).ema_filled
    s = ma_lib.MaStructure.new(close, fast, slow)
    ema_trends.push(ma_lib.market_structure(s))

trend_ico(trend) =>
    switch trend
        1 => '⬆︎' // Up
        -1 => '⬇︎' // Down
        0 => '〰︎' // Tangled
        => '?' // Unknown, data not available for calculation

trend_txt_color(trend) =>
    switch trend
        1 => #26a69a
        -1 => #ef5350
        0 => color.gray
        => color.silver
trend_bg_color(trend) =>
    switch trend
        1 => color.new(#26a69a,80)
        -1 => color.new(#ef5350,80)
        0 => color.new(color.gray,80)
        => color.new(color.silver,80)

//-----------------------------------------------------------------------------}

// Plot
//-----------------------------------------------------------------------------{

// ema1
ema1_tf1_plt = plot(ema1.get(0).ema, '', ema1.get(0).clr, linewidth = variable_width ? 1 : 1)
ema1_tf2_plt = plot(ema1.get(1).ema, '', ema1.get(1).clr, linewidth = variable_width ? 2 : 1)
ema1_tf3_plt = plot(ema1.get(2).ema, '', ema1.get(2).clr, linewidth = variable_width ? 3 : 1)
ema1_tf4_plt = plot(ema1.get(3).ema, '', ema1.get(3).clr, linewidth = variable_width ? 4 : 1)
ema1_tf5_plt = plot(ema1.get(4).ema, '', ema1.get(4).clr, linewidth = variable_width ? 5 : 1)

ema1_tf1_h_plt = plot(ema1_h.get(0), '', ema1_band_color, linewidth = 1)
ema1_tf2_h_plt = plot(ema1_h.get(1), '', ema1_band_color, linewidth = 1)
ema1_tf3_h_plt = plot(ema1_h.get(2), '', ema1_band_color, linewidth = 1)
ema1_tf4_h_plt = plot(ema1_h.get(3), '', ema1_band_color, linewidth = 1)
ema1_tf5_h_plt = plot(ema1_h.get(4), '', ema1_band_color, linewidth = 1)

ema1_tf1_l_plt = plot(ema1_l.get(0), '', ema1_band_color, linewidth = 1)
ema1_tf2_l_plt = plot(ema1_l.get(1), '', ema1_band_color, linewidth = 1)
ema1_tf3_l_plt = plot(ema1_l.get(2), '', ema1_band_color, linewidth = 1)
ema1_tf4_l_plt = plot(ema1_l.get(3), '', ema1_band_color, linewidth = 1)
ema1_tf5_l_plt = plot(ema1_l.get(4), '', ema1_band_color, linewidth = 1)

fill(ema1_tf1_h_plt, ema1_tf1_l_plt, ema1_band_color, fillgaps = true)
fill(ema1_tf2_h_plt, ema1_tf2_l_plt, ema1_band_color, fillgaps = true)
fill(ema1_tf3_h_plt, ema1_tf3_l_plt, ema1_band_color, fillgaps = true)
fill(ema1_tf4_h_plt, ema1_tf4_l_plt, ema1_band_color, fillgaps = true)
fill(ema1_tf5_h_plt, ema1_tf5_l_plt, ema1_band_color, fillgaps = true)

// ema2
ema2_tf1_plt = plot(ema2.get(0).ema, '', ema2.get(0).clr, linewidth = variable_width ? 1 : 1)
ema2_tf2_plt = plot(ema2.get(1).ema, '', ema2.get(1).clr, linewidth = variable_width ? 2 : 1)
ema2_tf3_plt = plot(ema2.get(2).ema, '', ema2.get(2).clr, linewidth = variable_width ? 3 : 1)
ema2_tf4_plt = plot(ema2.get(3).ema, '', ema2.get(3).clr, linewidth = variable_width ? 4 : 1)
ema2_tf5_plt = plot(ema2.get(4).ema, '', ema2.get(4).clr, linewidth = variable_width ? 5 : 1)
// ema3
ema3_tf1_plt = plot(ema3.get(0).ema, '', ema3.get(0).clr, linewidth = variable_width ? 1 : 1)
ema3_tf2_plt = plot(ema3.get(1).ema, '', ema3.get(1).clr, linewidth = variable_width ? 2 : 1)
ema3_tf3_plt = plot(ema3.get(2).ema, '', ema3.get(2).clr, linewidth = variable_width ? 3 : 1)
ema3_tf4_plt = plot(ema3.get(3).ema, '', ema3.get(3).clr, linewidth = variable_width ? 4 : 1)
ema3_tf5_plt = plot(ema3.get(4).ema, '', ema3.get(4).clr, linewidth = variable_width ? 5 : 1)

cntdwn_tb = table.new(position.top_right, 3, 5, force_overlay = true)
if barstate.islast
    countdowns = array.from(fmt_countdown(tf1),fmt_countdown(tf2),fmt_countdown(tf3),fmt_countdown(tf4),fmt_countdown(tf5))
    for idx = 0 to 4
        trend = ema_trends.get(idx)
        ico = trend_ico(trend)
        txt_color = trend_txt_color(trend)
        bg_color = trend_bg_color(trend)
        table.cell(cntdwn_tb,0,idx,tfs.get(idx),text_color = color.gray,bgcolor = na)
        table.cell(cntdwn_tb,1,idx,ico,text_color = txt_color,bgcolor = bg_color)
        table.cell(cntdwn_tb,2,idx,countdowns.get(idx),text_color = color.gray,bgcolor = na)
//-----------------------------------------------------------------------------}