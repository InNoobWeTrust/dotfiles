//@version=5
indicator("Noob's Indicators", overlay = false, max_lines_count = 500, max_bars_back = 3600)

//=============================================================================
// Imports
//=============================================================================
import TradingView/ta/8
import forbidden_gun/commonlib/4

//=============================================================================
// const
//=============================================================================
elliott_all_waves = 144
elliott_decisive_wave = 89
elliott_secondary_wave = 34

forex = 200

golden_ratio = 610

pythagorean_material = 147
pythagorean_mind = 258
pythagorean_wisdom = 369

banker_short_term = 257
banker_medium_term = 458
banker_long_term = 630

fibo_236 = 0.236
fibo_382 = 0.382
fibo_50 = 0.5
fibo_618 = 0.618
fibo_786 = 0.786

//=============================================================================
// EMA lines const
//=============================================================================

// Sonic R
ema_elliott_secondary_wave = ta.ema(close, elliott_secondary_wave)
ema_elliott_secondary_wave_low = ta.ema(low, elliott_secondary_wave)
ema_elliott_secondary_wave_high = ta.ema(high, elliott_secondary_wave)
ema_elliott_decisive_wave = ta.ema(close, elliott_decisive_wave)

ema_forex = ta.ema(close, forex)
ema_golden_ratio = ta.ema(close, golden_ratio)

// Pythagorean
ema_pythagorean_material = ta.ema(close, pythagorean_material)
ema_pythagorean_mind = ta.ema(close, pythagorean_mind)
ema_pythagorean_wisdom = ta.ema(close, pythagorean_wisdom)

// Banker
ema_elliott_all_waves = ta.ema(close, elliott_all_waves)
ema_banker_short_term = ta.ema(close, banker_short_term)
ema_banker_medium_term = ta.ema(close, banker_medium_term)
ema_banker_long_term = ta.ema(close, banker_long_term)

//=============================================================================
// Sonic R
//=============================================================================

// Input
//-----------------------------------------------------------------------------{
sonic_r_grp = '► Sonic R'
show_sonic_r = input.bool(true, inline = "Enable Sonic R", group = sonic_r_grp, title = "Show Sonic R", tooltip = "Sonic R indicate dynamic support/resistant levels for price action")
ema_elliott_secondary_wave_color = input.color(color.blue, title = "Elliott secondary wave (main line)", inline = "Elliott secondary wave" , group = sonic_r_grp)
ema_elliott_secondary_wave_fill_color = input.color(color.new(color.blue, transp = 85), title = "Elliott secondary wave (fill color)", inline = 'Elliott secondary wave', group = sonic_r_grp)
ema_elliott_decisive_wave_color = input.color(color.orange, title = "Elliott decisive wave", inline = "Elliott decisive wave" , group = sonic_r_grp)
ema_forex_color = input.color(color.purple, title = "Forex 200 sessions", inline = "Forex 200 sessions" , group = sonic_r_grp)
ema_golden_ratio_color = input.color(color.white, title = "Golden ratio", inline = "Golden ratio" , group = sonic_r_grp)
//-----------------------------------------------------------------------------}

// Plot
//-----------------------------------------------------------------------------{
sonic_r_secondary_plot = plot(show_sonic_r ? ema_elliott_secondary_wave : na, title = "Elliott secondary wave", color = ema_elliott_secondary_wave_color, linewidth = 1, style = plot.style_line, force_overlay = true)
sonic_r_low = plot(show_sonic_r ? ema_elliott_secondary_wave_low : na, title = "Elliott secondary wave lower bound", color = ema_elliott_secondary_wave_fill_color, linewidth = 1, style = plot.style_line, force_overlay = true)
sonic_r_high = plot(show_sonic_r ? ema_elliott_secondary_wave_high : na, title = "Elliott secondary wave higher bound", color = ema_elliott_secondary_wave_fill_color, linewidth = 1, style = plot.style_line, force_overlay = true)
fill(sonic_r_low, sonic_r_high, ema_elliott_secondary_wave_fill_color)
sonic_r_decisive_plot = plot(show_sonic_r ? ema_elliott_decisive_wave : na, title = "Elliott decisive wave", color = ema_elliott_decisive_wave_color, linewidth = 2, style = plot.style_line, force_overlay = true)
plot(show_sonic_r ? ema_forex : na, title = "Forex 200 sessions", color = ema_forex_color, linewidth = 2, style = plot.style_line, force_overlay = true)
plot(show_sonic_r ? ema_golden_ratio : na, title = "Golden ratio", color = ema_golden_ratio_color, linewidth = 2, style = plot.style_line, force_overlay = true)

sonic_r_state() =>
    up = close > ema_elliott_secondary_wave_low and  ema_elliott_secondary_wave_low > ema_elliott_decisive_wave
    down = close < ema_elliott_secondary_wave_high and  ema_elliott_secondary_wave_high < ema_elliott_decisive_wave
    if up
        "Up"
    else if down
        "Down"
    else
        "Undecisive"
    
sonic_r_up_down_color = switch sonic_r_state()
    'Up' => color.new(color.green, transp = 80)
    'Down' => color.new(color.red, transp = 80)
    'Undecisive' => na

var sonic_r_tb = table.new(position.middle_right,1,2)
if barstate.islast
    table.cell(sonic_r_tb,0,0,'Sonic R Trend',text_color=color.gray,bgcolor=na)
    table.cell(sonic_r_tb,0,1, sonic_r_state(), text_color=#26a69a, bgcolor=color.new(sonic_r_up_down_color, 80))
//-----------------------------------------------------------------------------}

//=============================================================================
// Banker
//=============================================================================

// Input
//-----------------------------------------------------------------------------{
banker_grp = '► Banker'
show_banker = input.bool(true, inline = "Enable EMA Banker", group = banker_grp, title = "Show EMA Banker", tooltip = "EMA banker indicate strong dynamic support/resistant levels for price action in long-term trade")
ema_banker_elliott_color = color.from_gradient(elliott_all_waves, elliott_all_waves, banker_long_term, color.aqua, color.maroon)
ema_banker_short_term_color = color.from_gradient(banker_short_term, elliott_all_waves, banker_long_term, color.aqua, color.maroon)
ema_banker_medium_term_color = color.from_gradient(banker_medium_term, elliott_all_waves, banker_long_term, color.aqua, color.maroon)
ema_banker_long_term_color = color.from_gradient(banker_long_term, elliott_all_waves, banker_long_term, color.aqua, color.maroon)
//-----------------------------------------------------------------------------}

// Plot
//-----------------------------------------------------------------------------{
plot(show_banker ? ema_elliott_all_waves : na, title = "Elliott all waves", color = ema_banker_elliott_color, linewidth = 1, style = plot.style_circles, force_overlay = true)
plot(show_banker ? ema_banker_short_term : na, title = "Banker short term", color = ema_banker_short_term_color, linewidth = 1, style = plot.style_circles, force_overlay = true)
plot(show_banker ? ema_banker_medium_term : na, title = "Banker medium term", color = ema_banker_medium_term_color, linewidth = 1, style = plot.style_circles, force_overlay = true)
plot(show_banker ? ema_banker_long_term : na, title = "Banker long term", color = ema_banker_long_term_color, linewidth = 1, style = plot.style_circles, force_overlay = true)
//-----------------------------------------------------------------------------}

//=============================================================================
// EMA Pythagorean
//=============================================================================

// Input
//-----------------------------------------------------------------------------{
pythagorean_grp = '► EMA Pythagorean'
show_pythagorean = input.bool(false, inline = "Enable Pythagorean cloud", group = pythagorean_grp, title = "Show Pythagorean cloud", tooltip = "Pythagorean cloud is a long-term trend reversing indicator. Green is uptrend and red is downtrend")
ema_material_color = input.color(color.new(color.navy, transp = 20), title = "Material stage", group = pythagorean_grp)
ema_mind_color = input.color(color.new(color.red, transp = 20), title = "Mind stage", group = pythagorean_grp)
ema_wisdom_color = input.color(color.new(color.maroon, transp = 20), title = "Wisdom stage", group = pythagorean_grp)
pythagorean_up_color = input.color(color.new(color.aqua, transp = 95), title = "Pythagorean Cloud", inline = "Pythagorean", group = pythagorean_grp)
pythagorean_down_color = input.color(color.new(color.orange, transp = 95), title = "", inline = "Pythagorean", group = pythagorean_grp)
//-----------------------------------------------------------------------------}

// Plot
//-----------------------------------------------------------------------------{
pythagorean_material_plot = plot(show_pythagorean ? ema_pythagorean_material : na, title = "Pythagorean material stage", color = ema_material_color, linewidth = 1, style = plot.style_line, force_overlay = true)
pythagorean_mind_plot = plot(show_pythagorean ? ema_pythagorean_mind : na, title = "Pythagorean mind state", color = ema_mind_color, linewidth = 2, style = plot.style_line, force_overlay = true)
pythagorean_wisdom_plot = plot(show_pythagorean ? ema_pythagorean_wisdom : na, title = "Pythagorean wisdom state", color = ema_wisdom_color, linewidth = 1, style = plot.style_line, force_overlay = true)
pythagorean_up_down_state = ema_pythagorean_material > ema_pythagorean_wisdom
pythagorean_up_down_color = pythagorean_up_down_state ? pythagorean_up_color : pythagorean_down_color
fill(pythagorean_material_plot, pythagorean_wisdom_plot, pythagorean_up_down_color)

var pythagorean_tb = table.new(position.bottom_right,1,2)
if barstate.islast
    table.cell(pythagorean_tb,0,0,'Pythagorean Trend',text_color=color.gray,bgcolor=na)
    table.cell(pythagorean_tb,0,1, pythagorean_up_down_state ? 'Upward' : 'Downward',text_color=#26a69a,bgcolor=color.new(pythagorean_up_down_color,80))
//-----------------------------------------------------------------------------}

//=============================================================================
// Abnormal volume candle color
//=============================================================================

// Input
//-----------------------------------------------------------------------------{
volume_bar_grp = '► Volume Weighted Colored Bars'

volume_bar_enable = input(true, title='Enable', group = volume_bar_grp, tooltip='Colors bars based on the bar\'s volume relative to volume moving average')
volume_bar_length = input.int(20, title='Volume SMA Length', group = volume_bar_grp, minval=1)

volume_bar_theshold_inline = "Relative thresholds"
volume_bar_theshold_low = input.float(fibo_618, volume_bar_theshold_inline, group = volume_bar_grp, inline = volume_bar_theshold_inline)
volume_bar_theshold_extreme = input.float(2. + fibo_618, '', group = volume_bar_grp, inline = volume_bar_theshold_inline)

volume_bar_up_gradient_inline = "Volume up gradient color"
volume_bar_up_gradient_start = input.color(color.aqua, volume_bar_up_gradient_inline, volume_bar_up_gradient_inline, group = volume_bar_grp, inline = volume_bar_up_gradient_inline)
volume_bar_up_gradient_end = input.color(color.navy, '', volume_bar_up_gradient_inline, group = volume_bar_grp, inline = volume_bar_up_gradient_inline)

volume_bar_down_gradient_inline = "Volume down gradient color"
volume_bar_down_gradient_start = input.color(color.yellow, volume_bar_down_gradient_inline, volume_bar_down_gradient_inline, group = volume_bar_grp, inline = volume_bar_down_gradient_inline)
volume_bar_down_gradient_end = input.color(color.maroon, '', volume_bar_down_gradient_inline, group = volume_bar_grp, inline = volume_bar_down_gradient_inline)
//-----------------------------------------------------------------------------}

// Calculation
//-----------------------------------------------------------------------------{
nzVolume = nz(volume)

// Volume Histogram
vol_sma  = ta.sma(nzVolume, volume_bar_length)

vol_color() =>
    color_gradient_start = close > open ? volume_bar_up_gradient_start : volume_bar_down_gradient_start
    color_gradient_end = close > open ? volume_bar_up_gradient_end : volume_bar_down_gradient_end
    color.from_gradient(nzVolume, vol_sma * volume_bar_theshold_low, vol_sma * volume_bar_theshold_extreme, color_gradient_start, color_gradient_end)
//-----------------------------------------------------------------------------}

// Plot
//-----------------------------------------------------------------------------{
// Volume Based Colored Bars
barcolor(volume_bar_enable ? vol_color() : na, title='Volume Weighted Colored Bars', editable=false)
//-----------------------------------------------------------------------------}

//=============================================================================
// RSI overbought and oversold
//=============================================================================

// Input
//-----------------------------------------------------------------------------{
rsi_outlier_grp = '► RSI overbought and oversold'
rsi_show_label = input(true, title='Show labels', group = rsi_outlier_grp, tooltip='Show labels at candle when RSI crossing overbought/oversold threshold')
rsi_src = input(close, title="RSI Source", group = rsi_outlier_grp)
rsi_sma_length = input.int(14, minval=1, title="RSI SMA length", group = rsi_outlier_grp)
rsi_thrust_signal = input.string('average', options = ['average', 'sma'], title = 'Upthrust/Downthrust signal source', tooltip = 'RSI source for calculating upthrust/downthrust signal', group = rsi_outlier_grp)
rsi_thrust_suppress_extreme_percent = input.float(5, minval=0, maxval=100, title = 'Thrust suppression percent', tooltip = 'Suppress extreme overbought/oversold percentage for calculating thrust/reversal signal', group = rsi_outlier_grp)
rsi_thrust_suppress_window = input.int(1, minval=1, title = 'Thrust suppression window', tooltip = 'Window size to check and suppress extreme overbought/oversold percentage', group = rsi_outlier_grp)
rsi_reversal_signal = input.string('sma', options = ['average', 'sma'], title = 'Reversal signal source', tooltip = 'RSI source for calculating reversal signal', group = rsi_outlier_grp)
rsi_min_length = input(6, group = rsi_outlier_grp, title='RSI Minimum Length')
rsi_max_length = input(48, group = rsi_outlier_grp, title='RSI Maximum Length')
rsi_avg_inline = "RSI Average Inline"
rsi_avg_dn_color = input(#ff5d00, title = 'Average RSI Gradient', group=rsi_outlier_grp,inline=rsi_avg_inline)
rsi_avg_up_color = input(#2157f3,title='',group=rsi_outlier_grp,inline=rsi_avg_inline)
rsi_upper_color = input(#0cb51a,'RSI Upper Level', group=rsi_outlier_grp)
rsi_lower_color = input(#ff1100,'RSI Lower Level', group=rsi_outlier_grp)
rsi_overbought_inline = "RSI Overbought Inline"
rsi_overbought_limit = input.float(70, group = rsi_outlier_grp, minval=50, step=10, title = 'Overbought threshold', inline = rsi_overbought_inline)
rsi_ob_area = input(color.new(#0cb51a,70),'Overbought Area',group=rsi_outlier_grp, inline = rsi_overbought_inline)
rsi_oversold_inline = "RSI Oversold Inline"
rsi_oversold_limit = input.float(30, group = rsi_outlier_grp, maxval=50, step=10, title = 'Oversold threshold', inline = rsi_oversold_inline)
rsi_os_area = input(color.new(#ff1100,70),'Oversold Area',group=rsi_outlier_grp,inline = rsi_oversold_inline)
//-----------------------------------------------------------------------------}

// Calculation
//-----------------------------------------------------------------------------{
rsi_range = rsi_max_length - rsi_min_length + 1
rsi_diff = nz(rsi_src - rsi_src[1])

var rsi_num = array.new_float(rsi_range,0)
var rsi_den = array.new_float(rsi_range,0)
//----
k = 0
overbuy = 0
oversell = 0
avg = 0.
for i = rsi_min_length to rsi_max_length
    alpha = 1/i
    
    num_rma = alpha * rsi_diff + (1 - alpha) * array.get(rsi_num, k)
    den_rma = alpha * math.abs(rsi_diff) + (1 - alpha) * array.get(rsi_den, k)
    rsi = 50 * num_rma / den_rma + 50
    avg += rsi
    
    overbuy := rsi > rsi_overbought_limit ? overbuy + 1 : overbuy
    oversell := rsi < rsi_oversold_limit ? oversell + 1 : oversell
    
    array.set(rsi_num,k,num_rma)
    array.set(rsi_den,k,den_rma)
    k += 1
//----
avg_rsi = avg / rsi_range
buy_rsi_ma = 0.
sell_rsi_ma = 0.

buy_rsi_ma := nz(buy_rsi_ma[1] + overbuy / rsi_range * (avg_rsi - buy_rsi_ma[1]), avg_rsi) 
sell_rsi_ma := nz(sell_rsi_ma[1] + oversell / rsi_range * (avg_rsi - sell_rsi_ma[1]), avg_rsi)

// RSI SMA
rsi_sma_up = ta.rma(math.max(ta.change(rsi_src), 0), rsi_sma_length)
rsi_sma_down = ta.rma(-math.min(ta.change(rsi_src), 0), rsi_sma_length)
rsi_sma_tmp = rsi_sma_down == 0 ? 100 : rsi_sma_up == 0 ? 0 : 100 - (100 / (1 + rsi_sma_up / rsi_sma_down))
rsi_sma = ta.sma(rsi_sma_tmp, rsi_sma_length)

// Suppression extreme momentum of RSI
rsi_percent_exceed(source, len, limit) =>
    ta.highest(source, len) > limit
thrust_suppression = rsi_percent_exceed(overbuy / rsi_range * 100, rsi_thrust_suppress_window, rsi_thrust_suppress_extreme_percent)
     or rsi_percent_exceed(oversell / rsi_range * 100, rsi_thrust_suppress_window, rsi_thrust_suppress_extreme_percent)
// Upthrust
thrust_signal = switch rsi_thrust_signal
    "average" => avg_rsi
    "sma" => rsi_sma
// Reversal
reversal_signal = switch rsi_reversal_signal
    "average" => avg_rsi
    "sma" => rsi_sma

up_thrust = ta.crossover(thrust_signal, sell_rsi_ma)
test_supply = ta.crossover(reversal_signal, rsi_oversold_limit)
down_thrust = ta.crossunder(thrust_signal, buy_rsi_ma)
test_demand = ta.crossunder(reversal_signal, rsi_overbought_limit)
//-----------------------------------------------------------------------------}

// Plot
//-----------------------------------------------------------------------------{

// MTF RSI
var rsi_tb = table.new(position.top_right,2,2)
if barstate.islast
    table.cell(rsi_tb,0,0,'Overbought',text_color=color.gray,bgcolor=na)
    table.cell(rsi_tb,1,0,'Oversold',text_color=color.gray,bgcolor=na)

    table.cell(rsi_tb,0,1, str.tostring(overbuy / rsi_range * 100,'#.##')+' %',text_color=#26a69a,bgcolor=color.new(#26a69a,80))
    table.cell(rsi_tb,1,1, str.tostring(oversell / rsi_range * 100,'#.##')+' %',text_color=#ef5350,bgcolor=color.new(#ef5350,80))
//----
css = color.from_gradient(avg_rsi,sell_rsi_ma,buy_rsi_ma,rsi_avg_dn_color,rsi_avg_up_color)
plot(avg_rsi,'Average Multi Length RSI',color=css, force_overlay = false)
up = plot(buy_rsi_ma,'Upper Channel',color=rsi_upper_color, force_overlay = false)
dn = plot(sell_rsi_ma,'Lower Channel',color=rsi_lower_color, force_overlay = false)

per_over = plot(overbuy / rsi_range * 100,'Overbought Area',color=color.new(rsi_ob_area,100),editable=false, force_overlay = false)
per_under = plot(100 - oversell / rsi_range * 100,'Oversold Area',color=color.new(rsi_os_area,100),editable=false, force_overlay = false)
upper = plot(100,color=na,editable=false,display=display.none, force_overlay = false)
lower = plot(0,color=na,editable=false,display=display.none, force_overlay = false)

fill(per_over,lower,rsi_ob_area)
fill(upper,per_under,rsi_os_area)
fill(up,dn,color.new(css,90))

hline(rsi_overbought_limit,color=color.new(color.gray, 70))
hline(50,color=color.new(color.gray, 70))
hline(rsi_oversold_limit,color=color.new(color.gray, 70))

plot(rsi_sma, "RSI-based MA", color=color.yellow, force_overlay = false)

// Upthrust labels
plotshape(rsi_show_label and not thrust_suppression and up_thrust and not test_supply ? low : na, "RSI upthrust", shape.labelup, location.belowbar, color(na), text = '🛍️', textcolor = color.green, size = size.tiny, force_overlay = true)
// Downthrust labels 
plotshape(rsi_show_label and not thrust_suppression and down_thrust and not test_demand ? high : na, "RSI downthrust", shape.labeldown, location.abovebar, color(na), text = '💣', textcolor = color.red, size = size.tiny, force_overlay = true)
// Test supply (oversold) labels
plotshape(rsi_show_label and test_supply ? low : na, "RSI test supply", shape.labelup, location.belowbar, color(na), text = '🚀', textcolor = color.green, size = size.tiny, force_overlay = true)
// Test demand (overbought) labels
plotshape(rsi_show_label and test_demand ? high : na, "RSI test demand", shape.labeldown, location.abovebar, color(na), text = '💥', textcolor = color.red, size = size.tiny, force_overlay = true)
// Overbought labels
plotshape(rsi_show_label and ta.crossunder(avg_rsi, rsi_oversold_limit) ? low : na, "RSI Crossunder Oversold", shape.labelup, location.belowbar, color(na), 0 , text = '🚨', textcolor = color.green, size = size.tiny, force_overlay = true)
// Oversold labels
plotshape(rsi_show_label and ta.crossover(avg_rsi, rsi_overbought_limit) ? high : na, "RSI Crossover Overbought", shape.labeldown, location.abovebar, color(na), 0 , text = '🚨', textcolor = color.red, size = size.tiny, force_overlay = true)
//-----------------------------------------------------------------------------}

//=============================================================================
// Biased candle
//=============================================================================

// Input
//-----------------------------------------------------------------------------{
biased_candle_grp = "► Biased candle"
biased_candle_enabled = input.bool(true, title = "Enable", group = biased_candle_grp)
biased_candle_label_size = input.string("small", options = ["auto","huge","large", "normal", "small", "tiny"], title='Label size', group = biased_candle_grp)

biased_candle_wick_percent = input.float(fibo_382, minval = 0., maxval = 1., title = "Min wick %", group = biased_candle_grp)
biased_candle_body_percent = input.float(fibo_236 / 10., minval = 0., maxval = 1., title = "Min body %", group = biased_candle_grp)
biased_candle_skew_percent = input.float(fibo_618, minval=0.5, maxval=1, title = "Min skew % (close price to wick's end)", group = biased_candle_grp)

biased_candle_vol_threshold = input.float(1.05, minval=1., title = "Relative volume threshold % (0 to disable)", group = biased_candle_grp)
biased_candle_filter_rsi = input.bool(true, title = "Only overbought/oversold zone", group = biased_candle_grp)

biased_candle_gap_inline = "Show value gap"
biased_candle_show_gap = input.bool(true, biased_candle_gap_inline, group = biased_candle_grp, inline = biased_candle_gap_inline)
biased_candle_gap_len = input.int(elliott_secondary_wave, '', group = biased_candle_grp, inline = biased_candle_gap_inline)
biased_candle_gap_up_color = input.color(color.new(color.green, transp = 80), '', group = biased_candle_grp, inline = biased_candle_gap_inline)
biased_candle_gap_down_color = input.color(color.new(color.red, transp = 80), '', group = biased_candle_grp, inline = biased_candle_gap_inline)

biased_candle_tp_inline = "Show TP estimation"
biased_candle_show_tp = input.bool(true, biased_candle_tp_inline, group = biased_candle_grp, inline = biased_candle_tp_inline)
biased_candle_tp_len = input.int(elliott_decisive_wave, '', minval=1, group = biased_candle_grp, inline = biased_candle_tp_inline)
biased_candle_tp_color = input.color(color.new(color.silver, transp = 50), '', group = biased_candle_grp, inline=biased_candle_tp_inline)
biased_candle_tp_rr = input.float(1. + fibo_618, 'Spread multiplier (TP)', group = biased_candle_grp, inline=biased_candle_tp_inline)

// Calculation
//-----------------------------------------------------------------------------{
bar_wick = commonlib.bar_wick_percent()
bar_body = commonlib.bar_body_percent()
bar_skewness = commonlib.bar_skewness_percent()

is_wick_exceeded = math.abs(bar_wick) > biased_candle_wick_percent
is_body_exceeded = math.abs(bar_body) > biased_candle_body_percent
is_skewness_exceeded = math.abs(bar_skewness) > biased_candle_skew_percent

is_abnormal_vol = nzVolume > vol_sma * biased_candle_vol_threshold

is_likely_oversold_reversal = biased_candle_filter_rsi ? (oversell / rsi_range) > 0. and bar_wick > 0. : true
is_likely_overbougth_reversal = biased_candle_filter_rsi ? (overbuy / rsi_range) > 0. and bar_wick < 0. : true
is_rsi_exhausted = is_likely_oversold_reversal or is_likely_overbougth_reversal

is_biased_candle = is_wick_exceeded and is_body_exceeded and is_skewness_exceeded and is_abnormal_vol and is_rsi_exhausted
//-----------------------------------------------------------------------------}

// Plot
//-----------------------------------------------------------------------------{
offset = math.abs(ta.change(close))
label_y = bar_wick > 0. ? low - offset : high + offset

fmt_bias_percent(bool label = false) =>
    if label
        'wick: ' + str.tostring(bar_wick * 100., "#.#") + '%, body: ' + str.tostring(bar_body * 100., "#.#") + '%, skewness: ' + str.tostring(bar_skewness * 100., "#.#") + "%"
    else
        str.tostring(bar_skewness * 100., "#.#") + '%,'

if biased_candle_enabled and is_biased_candle
    label_size = switch biased_candle_label_size
        "auto" => size.auto
        "huge" => size.huge
        "large" => size.large
        "normal" => size.normal
        "small" => size.small
        "tiny" => size.tiny
    label.new(bar_index, label_y, fmt_bias_percent(), style = label.style_text_outline, size = label_size, color = bar_skewness > 0. ? color.green : color.red, force_overlay =  true)
    fmt_alert_msg = str.format("[{0} - {1}][{2}] Biased candle <{3},{4}> {5}", syminfo.ticker, timeframe.period, timenow, close, volume, fmt_bias_percent(true))

    if biased_candle_show_gap
        time_extend = time + (time - time[1]) * biased_candle_gap_len
        gap_color = bar_skewness > 0 ? biased_candle_gap_up_color : biased_candle_gap_down_color
        l1_price = bar_skewness > 0 ? low : high
        l2_price = bar_wick > 0 ? low + bar_wick * (high - low) : high + bar_wick * (high - low)
        l1 = line.new(time, l1_price, time_extend, l1_price, xloc = xloc.bar_time, style = line.style_dotted, color = gap_color, force_overlay = true)
        l2 = line.new(time, l2_price, time_extend, l2_price, xloc = xloc.bar_time, style = line.style_dotted, color = gap_color, force_overlay = true)
        linefill.new(l1, l2, gap_color)

    if biased_candle_show_tp
        time_extend = time + (time - time[1]) * biased_candle_tp_len
        tp_price = bar_skewness > 0 ? close + (high - low) * biased_candle_tp_rr : close - (high - low) * biased_candle_tp_rr
        tp = line.new(time, tp_price, time_extend, tp_price, xloc = xloc.bar_time, style = line.style_solid, color = biased_candle_tp_color, width = 2, force_overlay = true)

    if barstate.islast and barstate.isconfirmed
        alert(fmt_alert_msg)
        log.info(fmt_alert_msg)

//-----------------------------------------------------------------------------}

//=============================================================================
// ATR window
//=============================================================================

// Input
//-----------------------------------------------------------------------------{
atr_window_grp = "► ATR window"
atr_window_enabled = input.bool(true, title = "Enable", group = atr_window_grp)
atr_length = input.int(elliott_decisive_wave, minval=1, title = "ATR length", group = atr_window_grp)
atr_window_size = input.int(5, minval=2, title = "Window size in bars", group = atr_window_grp)
atr_window_gradient_inline = "ATR gradients"
atr_window_gradient_start = input.color(color.new(color.green, transp = 70), title = "ATR gradients", group = atr_window_grp, inline = atr_window_gradient_inline)
atr_window_gradient_end = input.color(color.new(color.red, transp = 70), title = "", group = atr_window_grp, inline = atr_window_gradient_inline)
//-----------------------------------------------------------------------------}

// Calculation
//-----------------------------------------------------------------------------{
atr_val = ta.atr(atr_length)
atr_lower = close - atr_val
atr_upper = close + atr_val
//-----------------------------------------------------------------------------}

// Plot
//-----------------------------------------------------------------------------{
if atr_window_enabled and not barstate.isconfirmed
    extend_time = time + (time - time[1]) * atr_window_size
    atr_lower_plt = line.new(time, atr_lower[1], extend_time, atr_lower[1], xloc = xloc.bar_time, style = line.style_dotted, color = atr_window_gradient_start, force_overlay = true)
    prev_close_plt = line.new(time, close[1], extend_time, close[1], xloc = xloc.bar_time, style = line.style_dashed, color = color(na), force_overlay = true)
    atr_upper_plt = line.new(time, atr_upper[1], extend_time, atr_upper[1], xloc = xloc.bar_time, style = line.style_dotted, color = atr_window_gradient_end, force_overlay = true)
    linefill.new(atr_lower_plt, prev_close_plt, atr_window_gradient_start)
    linefill.new(atr_upper_plt, prev_close_plt, atr_window_gradient_end)
//-----------------------------------------------------------------------------}