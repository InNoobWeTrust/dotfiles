// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ©  InNoobWeTrust

//@version=6

// @description TODO: add library description here
library("polyglot_lib", overlay = false)
import TradingView/ta/9

//===============================================================================
// Constants
//===============================================================================

const int[] fib_numbers = array.from(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610)

//===============================================================================
// Types
//===============================================================================

export type PositionPlot
	line tp
	line sl
	line c
	linefill tp_fill
	linefill sl_fill

export type TfBar
    float o
    float h
    float l
    float c
    int t_o
    int t_c

export type TfBarZone
    int period_seconds
    TfBar bar

export type TfBarZonePlot
    line h
    line l
    linefill f

//===============================================================================
// Functions
//===============================================================================

// @function Calculate safe leverage based on ATR and the percentage of acceptable SL
// @param atr_len The length to calculate ATR
// @param sl_percent The percentage of acceptable SL
// @param mult The ATR multiplier to account for lateness in entry price
// @returns The tuple of: leverage rounded up to whole number, max_endurable_spread, max_endurable_percent
export estimate_leverage(int atr_len = 14, float sl_percent = 0.2, float mult = 1.5) =>
	spread_osc = ta.atr(atr_len)
	max_endurable_spread = spread_osc * mult
	max_endurable_percent = max_endurable_spread / close
	max_leverage = sl_percent / max_endurable_percent
	// Return max leverage as whole number
	[math.ceil(max_leverage), max_endurable_spread, max_endurable_percent]

// @function Display leverage, ATR, and the percentage of acceptable SL
// @param atr_len The length to calculate ATR
// @param sl_percent The percentage of acceptable SL
// @param mult The ATR multiplier to account for lateness in entry price
// @param pos The position to display the table
// @returns The table
export display_lvrg_table(int atr_len = 14, float sl_percent = 0.2, float mult = 1.5, string pos = position.bottom_right) =>
	lvrg_tb = table.new(pos,2,3,force_overlay = true)
	[lvrg, _, _] = estimate_leverage(atr_len,sl_percent,mult)
	atr = ta.atr(atr_len)
	atr_percent = atr / close
	table.cell(lvrg_tb,0,0,'SL',text_color=color.gray,bgcolor=color.new(color.gray, transp = 80))
	table.cell(lvrg_tb,1,0,str.format('{0,number,percent}',sl_percent),bgcolor=color.new(color.gray, transp = 80),text_color=color.red)
	table.cell(lvrg_tb,0,1,'ATR',text_color=color.gray,bgcolor=color.new(color.silver, transp = 80))
	table.cell(lvrg_tb,1,1,str.format('{0,number,#.###}%',atr_percent*100),bgcolor=color.new(color.silver, transp = 80),text_color=color.yellow)
	table.cell(lvrg_tb,0,2,'Lvrg',text_color=color.gray,bgcolor=color.new(color.gray, transp = 80))
	table.cell(lvrg_tb,1,2,str.format('x{0,number,integer}',lvrg),bgcolor=color.new(color.gray, transp = 80),text_color=color.aqua)
	// Return the table id to manage drawings
	lvrg_tb

// @function Display current RSI and SMA of RSI
// @param rsi_len The length to calculate RSI
// @param rsi_sma_len The length to calculate SMA of RSI
// @param pos The position to display the table
// @returns The table
export display_rsi_table(int rsi_len = 14, int rsi_sma_len = 14, string pos = position.middle_right) =>
	rsi_tb = table.new(pos,1,4,force_overlay = false)
	rsi = ta.rsi(close,rsi_len)
	rsi_sma = ta.sma(rsi,rsi_sma_len)
	rsi_color = switch
		rsi >= 70 => color.green
		rsi <= 30 => color.red
		=> color.gray
	rsi_sma_color = switch
		rsi_sma >= 65 => color.teal
		rsi_sma <= 35 => color.orange
		=> color.silver
	table.cell(rsi_tb,0,0,'RSI',text_color=color.gray,bgcolor=color.new(color.gray, transp = 80))
	table.cell(rsi_tb,0,1,str.format('{0,number}',rsi),bgcolor=color.new(color.silver, transp = 80),text_color=rsi_color)
	table.cell(rsi_tb,0,2,'RSI SMA',text_color=color.gray,bgcolor=color.new(color.gray, transp = 80))
	table.cell(rsi_tb,0,3,str.format('{0,number}',rsi_sma),bgcolor=color.new(color.silver, transp = 80),text_color=rsi_sma_color)
	// Return the table id to manage drawings
	rsi_tb

// @function Calculate the pivot left high with cutoff
// @param src The source series
// @param len Pivot length
// @param cutoff Cutoff value, na means no cutoff
// @returns The pivot high with cutoff
export pivot_left_high(float src, int len, float cutoff = na) =>
	pivot_high = ta.pivothigh(src,len,0)
	pivot_high_non_na = ta.valuewhen(not na(pivot_high),pivot_high,0)
	if not na(cutoff)
		// Return the pivot with cutoff
		math.max(pivot_high_non_na,cutoff)
	else
		// Return the non na
		pivot_high_non_na

// @function Calculate the pivot left low with cutoff
// @param src The source series
// @param len Pivot length
// @param cutoff Cutoff value, na means no cutoff
// @returns The pivot low with cutoff
export pivot_left_low(float src, int len, float cutoff = na) =>
	pivot_low = ta.pivotlow(src,len,0)
	pivot_low_non_na = ta.valuewhen(not na(pivot_low),pivot_low,0)
	if not na(cutoff)
		// Return the pivot with cutoff
		math.min(pivot_low_non_na,cutoff)
	else
		// Return the non na
		pivot_low_non_na

// @function Calculate top wick, bottom wick and body in percentage of candle's height
// @param o Open price
// @param h High price
// @param l Low price
// @param c Close price
// @returns Tuple of top wick + bottom wick + body as percentage, body can be negative
export candle_split_percent(float o,float h, float l, float c) =>
	spread = h - l
	body_top = math.max(o,c)
	body_bottom = math.min(o,c)
	body = (c - o) / spread // Can be negative
	top_wick = (h - body_top) / spread
	bottom_wick = (body_bottom - l) / spread
	// Return the wicks and body as percentage
	[top_wick, bottom_wick, body]

// @function Calculate target price by providing target rsi and reverse engineer the formula.
// 			 Reference: https://c.mql5.com/forextsd/forum/138/reverse_engineering_rsi.pdf
// @param len RSI length
// @param target_rsi the target RSI for price estimation
// @returns the reverse engineered close price that matches target RSI
export reverse_engineering_rsi(int len, float target_rsi) =>
	exp_per = 2 * len - 1
	// Average up close
	uc = close > close[1] ? close - close[1] : 0
	auc = ta.ema(uc,exp_per)
	// Average down close
	dc = close < close[1] ? close[1] - close : 0
	adc = ta.ema(dc,exp_per)
	// x factor
	x = (len - 1) * (adc * target_rsi / (100 - target_rsi) - auc)
	// RevEngRSI
	rev_eng_rsi = x >= 0 ? close + x : close + x * (100 - target_rsi) / target_rsi
	// Return RevEngRSI
	rev_eng_rsi


// @function Draw entry with TP/SL
// @param tp The take profit price
// @param sl The stop loss price
// @param bars The width of the drawing
// @returns The drawings ids
export plot_position_entry(float tp,float sl, int bars) =>
	tp_color = color.new(#40ee40,50)
	tp_fill_color = color.new(#40ee40,90)
	sl_color = color.new(#ee4040,50)
	sl_fill_color = color.new(#ee4040,90)
	tp_plt = line.new(bar_index,tp,bar_index + bars,tp,xloc = xloc.bar_index,color=tp_color,force_overlay = true)
	sl_plt = line.new(bar_index,sl,bar_index + bars,sl,xloc = xloc.bar_index,color=sl_color,force_overlay = true)
	close_plt = line.new(bar_index,close,bar_index+bars,close,xloc = xloc.bar_index,color = color(na),force_overlay = true)
	tp_fill = linefill.new(tp_plt,close_plt,tp_fill_color)
	sl_fill = linefill.new(sl_plt,close_plt,sl_fill_color)
	// Return the drawings
	PositionPlot.new(tp_plt,sl_plt,close_plt,tp_fill,sl_fill)

// @function Clear position plot
// @param pos_plt The plot to clear
export clear_position_plot(PositionPlot pos_plt) =>
	linefill.delete(pos_plt.tp_fill)
	linefill.delete(pos_plt.sl_fill)
	line.delete(pos_plt.c)
	line.delete(pos_plt.tp)
	line.delete(pos_plt.sl)

// @function fill na value from a source with its last non-na
// @param src source series
// @returns the series with filled values using previous data point
export fill_na(series float src) =>
    ta.valuewhen(not na(src), src, 0)

// @function check if the bar is in right timing as specified
// @param bar_time the bar's time in UNIX format
// @param period_seconds the period of bar's timeframe, in seconds
// @param timing the timing, in seconds
// @returns true if timing is within bar's session, false otherwise
export check_bar_time(int bar_open_time, int bar_close_time, int timing) =>
    bar_open_time <= timing and timing < bar_close_time

// @function checking if any timing is within the bar's time using binary search
// @param open_time bar's open time in UNIX format
// @param close_time bar's close time in UNIX format
// @param timings array of timings
// @returns true if any timing is within bar's session, false otherwise
export check_bar_time(int open_time, int close_time, int[] timings) =>
    found = false
	// Try copy and then sort
	sorted_timings = array.copy(timings)
	array.sort(sorted_timings, order.ascending)
	timing_left_idx = array.binary_search_leftmost(sorted_timings,open_time)
	timing_right_idx = array.binary_search_rightmost(sorted_timings,close_time)
    if timing_right_idx - timing_left_idx > 0
		for idx = timing_left_idx to timing_right_idx
			timing = sorted_timings.get(idx)
			if check_bar_time(open_time,close_time,timing)
				found := true
				break
    found

// @function check if current bar just broke resistance level
// @param resistance the resistance level
// @returns true if broke, false otherwise
export resistance_breakout(float resistance) =>
    // Breakout if previous bar touches the level but current bar is higher than level
    low > resistance and low[1] <= resistance

// @function check if current bar just broke support level
// @param support the support level
// @returns true if broke, false otherwise
export support_breakout(float support) =>
    // Breakout if previous bar touches the level but current bar is lower than level
    high < support and high[1] >= support

// @function Plot the price zone of TfBar
// @param z Zone data of TfBar
// @param clr Color for the zone
export plot_tf_zone(TfBarZone z, color clr) =>
    // Line for high value
    h = line.new(time, z.bar.h, time_close, z.bar.h, xloc = xloc.bar_time,extend = extend.right, color = clr, style = line.style_solid, force_overlay = true)
    l = line.new(time, z.bar.l, time_close, z.bar.l, xloc = xloc.bar_time,extend = extend.right, color = clr, style = line.style_solid, force_overlay = true)
    f = linefill.new(h,l,clr)
    TfBarZonePlot.new(h,l,f)

// @function Clear plotted TfBarZone
// @param z Plot data
export clear_tf_zone(TfBarZonePlot z) =>
	linefill.delete(z.f)
	line.delete(z.h)
	line.delete(z.l)

//===============================================================================
// Testing
//===============================================================================

// Volatility
//-------------------------------------------------------------------------------
fast_atr = ta.atr(34)
slow_atr = ta.atr(144)
atr_diff = fast_atr - slow_atr
atr_diff_signal = ta.ema(atr_diff,9)
atr_diff_hist = atr_diff - atr_diff_signal
atr_rising = ta.rising(atr_diff_hist,1)
atr_falling = ta.falling(atr_diff_hist,1)
atr_converging = ta.falling(math.abs(atr_diff_hist),1)
atr_diverging = ta.rising(math.abs(atr_diff_hist),1)

atr_diff_areacolor = switch atr_diff >=0
	true => color.new(color.teal,70)
	false => color.new(color.olive,70)
atr_diff_histcolor = switch atr_diff > atr_diff_signal
	true => color.new(color.blue,10)
	false => color.new(color.maroon,10)
atr_diff_pivot_high = pivot_left_high(atr_diff,34,0)
atr_diff_pivot_low = pivot_left_low(atr_diff,34,0)
// fast_atr_plt = plot(fast_atr, 'ATR fast',color=#eeeeee,force_overlay = false)
// slow_atr_plt = plot(slow_atr, 'ATR slow',color=#888888,force_overlay = false)
atr_diff_plt = plot(atr_diff, 'ATR diff',color=color.purple,linewidth = 1,force_overlay = false)
atr_diff_histfillplt = plot(atr_diff >= 0 ? math.min(atr_diff,atr_diff_signal) : math.max(atr_diff,atr_diff_signal), 'ATR diff area filling',color=atr_diff_areacolor,style = plot.style_histogram,force_overlay = false)
atr_diff_signal_plt = plot(atr_diff_signal, 'ATR diff signal',color=color.red,linewidth = 1,force_overlay = false)
fill(atr_diff_plt,atr_diff_signal_plt,atr_diff_histcolor,'ATR convergence divergence')
atr_diff_pivot_high_plt = plot(atr_diff_pivot_high, 'ATR pivot high',color = color.blue,force_overlay = false)
atr_diff_pivot_low_plt = plot(atr_diff_pivot_low, 'ATR pivot low',color = color.yellow,force_overlay = false)

atr_hist_crossover = ta.crossover(atr_diff,atr_diff_signal)
atr_hist_crossunder = ta.crossunder(atr_diff,atr_diff_signal)
atr_cross_bg_color = switch
	atr_hist_crossover => color.new(color.aqua,80)
	atr_hist_crossunder => color.new(color.yellow,80)
	=> color(na)
bgcolor(atr_cross_bg_color)

// Demand/Supply zones (Elliott's single full cycle of 8 waves)
//-------------------------------------------------------------------------------
demand_supply_enable = input.bool(true,'Enable demand/supply zones')

demand_price = demand_supply_enable ? pivot_left_low(low,8) : na
pivot_low = demand_supply_enable ? ta.pivotlow(8,0) : na
demand_zone = demand_supply_enable ? ta.valuewhen(not na(pivot_low),math.min(open,close),0) : na
supply_price = demand_supply_enable ? pivot_left_high(high,8) : na
pivot_high = demand_supply_enable ? ta.pivothigh(8,0) : na
supply_zone = demand_supply_enable ? ta.valuewhen(not na(pivot_high),math.max(open,close),0) : na
demand_supply_balance = (close - demand_zone) / ((close - demand_zone) + (supply_zone - close))

close_plt = plot(close,'Close price',color=color(na),force_overlay = true)
demand_price_plt = plot(demand_price,'Demand price',color=color.new(color.olive,90),force_overlay = true)
demand_zone_plt = plot(demand_zone,'Demand zone',color=color.new(color.olive,80),force_overlay = true)
supply_price_plt = plot(supply_price,'Supply price',color=color.new(color.red,90),force_overlay = true)
supply_zone_plt = plot(supply_zone,'Supply zone',color=color.new(color.red,80),force_overlay = true)
fill(demand_price_plt,close_plt,color=color.new(color.olive,95))
fill(supply_price_plt,close_plt,color=color.new(color.red,95))

// ATR based band
//-------------------------------------------------------------------------------
atr_band_enable = input.bool(true, 'Enable ATR band')

atr_upper_band = atr_band_enable ? ohlc4 + slow_atr[1] * 0.75 : na
atr_mid_band = atr_band_enable ? ohlc4 : na
atr_lower_band = atr_band_enable ? ohlc4 - slow_atr[1] * 0.75 : na
atr_upper_band_plt = plot(atr_upper_band,'ATR upper band',color.new(color.teal,70),force_overlay = true)
atr_mid_band_plt = plot(atr_mid_band,'ATR middle band',color.new(color.gray,80), force_overlay = true)
atr_lower_band_plt = plot(atr_lower_band,'ATR lower band',color.new(color.red,70),force_overlay = true)
fill(atr_upper_band_plt,atr_mid_band_plt,color.new(color.teal,90))
fill(atr_lower_band_plt,atr_mid_band_plt,color.new(color.red,90))

// RSI table
//-------------------------------------------------------------------------------
var table rsi_tb = na

// Cleanup old table
if not na(rsi_tb)
	table.delete(rsi_tb)
// Update leverage table
rsi_tb := display_rsi_table()

// Overbought/Oversold price by reverse engineering RSI
//-------------------------------------------------------------------------------
revengrsi_enable = input.bool(false,'Enable RevEngRSI', tooltip = 'Ref: https://c.mql5.com/forextsd/forum/138/reverse_engineering_rsi.pdf')

overbought_threshold = revengrsi_enable ? reverse_engineering_rsi(14,70) : na
equilibrium_threshold = revengrsi_enable ? reverse_engineering_rsi(14,50) : na
oversold_threshold = revengrsi_enable ? reverse_engineering_rsi(14,30) : na

overbought_plt = plot(overbought_threshold,'Overbought threshold', color = color.new(color.red,50),force_overlay = true)
equilibrium_plt = plot(equilibrium_threshold,'Equilibrium threshold', color = color.new(color.silver,50),style = plot.style_circles,force_overlay = true)
oversold_plt = plot(oversold_threshold,'Oversold threshold', color = color.new(color.green,50),force_overlay = true)

// Leverage table
//-------------------------------------------------------------------------------
var table lvrg_tb = na

// Cleanup old table
if not na(lvrg_tb)
	table.delete(lvrg_tb)
// Update leverage table
lvrg_tb := display_lvrg_table(atr_len = 144, mult = 2)

// Biased candle
//-------------------------------------------------------------------------------
[top_wick, bottom_wick, body] = candle_split_percent(open,high,low,close)
candle_wick_bias = bottom_wick >= 0.5 ? 1 : top_wick >= 0.5 ? -1 : na
candle_bias = (ohlc4 - low) / (high - low)
candle_bias_rising = ta.rising(ohlc4,1)
candle_bias_falling = ta.falling(ohlc4,1)
candle_rising = candle_wick_bias > 0 and candle_bias >= 0.5
candle_falling = candle_wick_bias < 0 and candle_bias < 0.5
candle_atr_band_pushback_up = low < atr_lower_band and close < atr_upper_band
candle_atr_band_pushback_down = high > atr_upper_band and close > atr_lower_band

candle_strictly_rising = candle_rising and candle_atr_band_pushback_up and candle_bias_falling
candle_strictly_falling = candle_falling and candle_atr_band_pushback_down and candle_bias_rising

// plot(not candle_rising and not candle_falling ? ohlc4 : na,'Price balance',style = plot.style_linebr,linewidth = 2, color = color.silver,force_overlay = true)
plotshape(candle_strictly_rising,'Biased candle rising',style=shape.triangleup,location=location.belowbar,color=color.green,force_overlay = true)
plotshape(candle_strictly_falling,'Biased candle falling',style=shape.triangledown,location=location.abovebar,color=color.red,force_overlay = true)

// Bollinger band
//-------------------------------------------------------------------------------
bb_enable = input.bool(false, 'Enable Bollinger Band')

[bb_mid,bb_upper,bb_lower] = ta.bb(close,34,1)
if not bb_enable
	bb_mid := na
	bb_upper := na
	bb_lower := na
plot(bb_mid, color=color.new(color.gray,50),force_overlay = true)
plot(bb_upper, color=color.new(#688868,50),force_overlay = true)
plot(bb_lower, color=color.new(#886868,50),force_overlay = true)
bb_exceed_upper = high > bb_upper
bb_exceed_lower = low < bb_lower

// MA
//-------------------------------------------------------------------------------
ma_enable = input.bool(false, 'Enable MA')

ma_fast = ma_enable ? ta.sma(close, 34) : na
ma_slow = ma_enable ? ta.sma(close,89) : na
ma_diff = ma_fast - ma_slow
ma_rising = ta.rising(ma_slow,1)
ma_falling = ta.falling(ma_slow,1)
ma_signal = ta.ema(ma_diff,9)
ma_diff_hist = ma_diff - ma_signal
ma_converging = ta.falling(math.abs(ma_diff_hist),1)
ma_diverging = ta.rising(math.abs(ma_diff_hist),1)

ma_fast_plt = plot(ma_fast,'MA fast',color.new(color.blue,95),force_overlay = true)
ma_slow_plt = plot(ma_slow,'MA slow',color.new(color.orange,95),linewidth = 2,force_overlay = true)
fill(ma_fast_plt,ma_slow_plt,ma_diff >= 0 ? color.new(color.teal,80) : color.new(color.red,90))

test_ma = switch ma_diff_hist >= 0
	true => low > ma_slow and high < ma_fast
	false => high < ma_slow and low > ma_fast
// Colored background for candles that stuck between the ema lines
plotcandle(close >= open ? low : high,test_ma ? high : na,test_ma ? low : na,close>=open ? high : low,color=close>=open ? color.new(color.teal,70) : color.new(color.red,70),bordercolor = close>=open ? color.new(color.teal,70) : color.new(color.red,70),force_overlay = true)

// RSI
//-------------------------------------------------------------------------------
rsi = ta.rsi(close,14)
rsi_oversold = rsi <= 30
rsi_overbought = rsi >= 70
rsi_sw = 45 <= rsi and rsi <= 55

rsi_enter_sw = rsi_sw and not rsi_sw[1]
rsi_exit_sw = not rsi_sw and rsi_sw[1]
var int first_sw_bar_index = 0
var box latest_sw_box = na
if rsi_enter_sw
	first_sw_bar_index := bar_index
box_bottom = ta.lowest(bar_index - first_sw_bar_index + 1)
box_top = ta.highest(bar_index - first_sw_bar_index + 1)
if barstate.isconfirmed
	if rsi_sw and bar_index - first_sw_bar_index > 7
		if not na(latest_sw_box)
			box.delete(latest_sw_box)
		latest_sw_box := box.new(first_sw_bar_index,box_top,bar_index,box_bottom,xloc = xloc.bar_index,border_color = color.new(color.gray,50),bgcolor = color.new(color.silver,70),force_overlay = true)
	else if rsi_exit_sw
		if not na(latest_sw_box)
			log_msg = str.format('Sideway in TR from {0,number} to {1,number}',latest_sw_box.get_bottom(),latest_sw_box.get_top())
			log.warning(log_msg)
			alert(log_msg)
			latest_sw_box := na

// MACD
//-------------------------------------------------------------------------------
[macd_line, macd_signal_line, macd_hist_line] = ta.macd(close,34,89,9)
macd_rising = ta.rising(macd_hist_line,1)
macd_falling = ta.falling(macd_hist_line,1)
// plot(macd_line, color=color.blue, force_overlay = false)
// plot(macd_signal_line, color=color.orange, force_overlay = false)

macd_hist_color = switch macd_hist_line >= 0
	true => macd_rising ? color.new(color.teal,50) : color.new(color.lime,50)
	false => macd_falling ? color.new(color.red,50) : color.new(color.orange,50)
plot(macd_hist_line, color=macd_hist_color, style=plot.style_columns, force_overlay = false)

// Candle bias + MACD histogram => Scaled candle bias
//-------------------------------------------------------------------------------
scaled_candle_bias = switch macd_hist_line >=0
	true => candle_bias * macd_hist_line
	false => (1 - candle_bias) * macd_hist_line
plot(scaled_candle_bias,"Scaled candle's bias",color.new(color.silver,60),style = plot.style_area,force_overlay = false)
plot(0.5 * macd_hist_line,"MACD balance guide",color.new(color.white,50),style = plot.style_line,force_overlay = false)

// Pivot profile
//-------------------------------------------------------------------------------
const int MAX_PROFILE_BARS = 32
max_pivots = MAX_PROFILE_BARS * 16
max_pivots_cutoff = max_pivots / 8
var float[] pivots = array.new<float>(max_pivots)

// Add new pivots
if demand_price != demand_price[1]
	array.push(pivots, demand_price)
if supply_price != supply_price[1]
	array.push(pivots, supply_price)
// Shrink the original array to max capacity
while pivots.size() > max_pivots
	array.shift(pivots)

// Sorted pivots for finding nearest key levels
sorted_pivots = array.copy(pivots)
// Sort the arrays
array.sort(sorted_pivots,order.ascending)

// Take only pivots around the last close price
pivots_stdev = array.stdev(sorted_pivots)
pivot_low_cutoff = close[1] - pivots_stdev
pivot_high_cutoff = close[1] + pivots_stdev
pivot_low_offset_idx = array.binary_search_leftmost(sorted_pivots,pivot_low_cutoff)
pivot_high_offset_idx = array.binary_search_rightmost(sorted_pivots,pivot_high_cutoff)
// Cutoff the sorted array
if pivot_high_offset_idx - pivot_low_offset_idx > 1
	sorted_pivots := array.slice(sorted_pivots,math.max(0,pivot_low_offset_idx), math.min(pivot_high_offset_idx, sorted_pivots.size() - 1))
else
	pivot_offset_idx = array.binary_search_leftmost(sorted_pivots,close[1])
	sorted_pivots := array.slice(sorted_pivots,math.max(0,pivot_offset_idx - max_pivots_cutoff), math.min(pivot_offset_idx + max_pivots_cutoff, sorted_pivots.size() - 1))

// Calculate delta price for each profile bar
pivot_profile_lowest = sorted_pivots.first()
pivot_profile_delta = (sorted_pivots.last() - sorted_pivots.first()) / MAX_PROFILE_BARS
pivot_profile_hist = array.new<float>(MAX_PROFILE_BARS,0.)
for i = 0 to MAX_PROFILE_BARS - 1
	profile_bar_l = pivot_profile_lowest + pivot_profile_delta * (i - 0.5)
	profile_bar_h = profile_bar_l + pivot_profile_delta
	// Optimize loop by only looping till the value below profile_bar_h
	max_idx = array.binary_search_rightmost(sorted_pivots,profile_bar_h)
	for j = 0 to max_idx
		pivot = sorted_pivots.get(j)
		if profile_bar_l <= pivot and pivot < profile_bar_h
			count = array.get(pivot_profile_hist,i)
			count += 1
			array.set(pivot_profile_hist,i,count)

// Scaled profile histogram
const int PIVOT_PROFILE_OFFSET = 2
var line[] pivot_profile_lines = array.new<line>(MAX_PROFILE_BARS,na)
var line[] pivot_poc_lines = array.new<line>()

// Plot pivot profile
if barstate.islast
	pivot_profile_width = math.round(array.max(pivot_profile_hist))
	pivot_profile_bar_index = bar_index + pivot_profile_width + PIVOT_PROFILE_OFFSET
	pivot_scale_factor = array.range(pivot_profile_hist) / pivot_profile_width
	pivot_hist_max_nth = math.round(array.max(pivot_profile_hist,2))
	// pivot_hist_max_nth_price = pivot_profile_lowest + pivot_profile_delta / 2 * array.indexof(pivot_profile_hist,array.max(pivot_profile_hist,1))

	for l in pivot_profile_lines
		line.delete(l)
	for l in pivot_poc_lines
		line.delete(l)
	array.clear(pivot_poc_lines)
	for i = 0 to MAX_PROFILE_BARS - 1
		profile_bar_avg = pivot_profile_lowest + pivot_profile_delta * i / 2.
		hist_value = math.round(array.get(pivot_profile_hist,i))
		l = line.new(x1 = pivot_profile_bar_index - hist_value,
				 	 y1 = profile_bar_avg,
				 	 x2 = pivot_profile_bar_index,
				 	 y2 = profile_bar_avg,
				 	 xloc = xloc.bar_index,
				 	 extend = extend.none,
				 	 color = color.new(color.orange,50),
				 	 style = line.style_solid,
				 	 width = 2,
				 	 force_overlay = true)
		array.set(pivot_profile_lines,i,l)
		if hist_value >= pivot_hist_max_nth
			poc = line.new(x1 = pivot_profile_bar_index - hist_value,
					 	   y1 = profile_bar_avg,
					 	   x2 = pivot_profile_bar_index,
					 	   y2 = profile_bar_avg,
					 	   xloc = xloc.bar_index,
					 	   extend = extend.left,
					 	   color = hist_value > pivot_hist_max_nth ? color.new(color.red,70) : color.new(color.yellow,70),
					 	   style = line.style_solid,
					 	   width = 1,
					 	   force_overlay = true)
			array.push(pivot_poc_lines,poc)


// Biased candle for reversal signal, atr signal low volatility environment that supports reversal
//-------------------------------------------------------------------------------
position_enable = input.bool(true,'Enable order positions')

long_signal = not rsi_sw and candle_strictly_rising and atr_rising and atr_diverging
short_signal = not rsi_sw and candle_strictly_falling and atr_falling and macd_falling

if not position_enable
	long_signal := false
	short_signal := false

nearest_lower_pivot = array.get(sorted_pivots, array.binary_search_leftmost(sorted_pivots,close))
nearest_higher_pivot = array.get(sorted_pivots, array.binary_search_rightmost(sorted_pivots,close) - 1)

sl = long_signal ? math.min(low, math.avg(nearest_lower_pivot, low - slow_atr)) : short_signal ? math.max(high,math.avg(nearest_higher_pivot,high + slow_atr)) : na
tp = long_signal ? math.max(close + 1.5 * slow_atr,math.avg(nearest_higher_pivot,supply_zone)) : short_signal ? math.min(close - 1.5 * slow_atr,math.avg(nearest_lower_pivot,demand_zone)) : na

rr = long_signal or short_signal ? (tp - close) / (close - sl) : na
desired_winrate = 0.6
desired_rr = desired_winrate / (1 - desired_winrate)
is_satisfactory_rr = math.abs(rr) >= desired_rr
[lvrg,max_endurable_spread, _] = estimate_leverage(89,0.2,3)
is_safe_sl = math.abs(close - sl) < max_endurable_spread

scalp_entry_up = long_signal and is_satisfactory_rr and is_safe_sl
scalp_entry_down = short_signal and is_satisfactory_rr and is_safe_sl

// plotchar(scalp_entry_up,'Biased candle rising',char='L',location=location.belowbar,size = size.tiny,color=color.green,force_overlay = true)
// plotchar(scalp_entry_down,'Biased candle falling',char='S',location=location.abovebar,size = size.tiny,color=color.red,force_overlay = true)

// var PositionPlot[] pos_plts = array.new<PositionPlot>()
if scalp_entry_up or scalp_entry_down
	label.new(x=bar_index, y = scalp_entry_down ? low : high,text = str.format('x{0,number,integer}',lvrg),xloc = xloc.bar_index,yloc = scalp_entry_up ? yloc.belowbar : yloc.abovebar,color=scalp_entry_up ? color.green : color.red,style = label.style_text_outline,size=size.small,force_overlay = true)
	plt = plot_position_entry(tp,sl,3)
	log_msg = if scalp_entry_up
		str.format('Long: {0,number}, TP: {1,number}, SL: {2,number}, RR: {3,number,percent}',close,tp,sl,rr)
	else if scalp_entry_down
		str.format('Short: {0,number}, TP: {1,number}, SL: {2,number}, RR: {3,number,percent}',close,tp,sl,rr)
	log.info(log_msg)
	alert(log_msg)
	// array.push(pos_plts, plt)
	// if pos_plts.size() > 10
	// 	old_plt = array.shift(pos_plts)
	// 	clear_position_plot(old_plt)